schemaVersion: '0.3'
description: Add a HANA worker node
parameters:
  HanaPrimaryInstanceId:
    allowedPattern: ^i-[a-z0-9]{17}$
    default: i-abcdefg1234567890
    description: (Required) Instance ID of the primary HANA node.
    type: String
  HanaDbWorkerHostname:
    allowedPattern: ^[a-z0-9-]+$
    default: examplenode02
    description: (Required) Hostname of the new HANA subordinate node.
    maxChars: 13
    type: String
  HanaDbPasswordSecretKey:
    allowedPattern: ^[\w/_+=.@-]{0,512}$
    default: LaunchWizard-ExampleSecret-GlobalPassword
    description: (Required) Name of the secret used for storing the HANA password.
    maxChars: 512
    type: String
  HanaDbAmiId:
    allowedPattern: ^ami-([a-z0-9]{8}|[a-z0-9]{17})$
    default: ami-00000000000000000
    description: (Required) AMI to be used for the new DB node. Typically, this will be latest copy of existing DB worker node.
    type: String
  HanaDbSecurityGroup:
    allowedPattern: ^(?:sg-[a-z0-9]{8}|sg-[a-z0-9]{17})?$
    default: ''
    description: (Optional) Security Group to be used for the new HANA node. If left blank, the security group will be inferred from parent deployment.
    type: String
  Ec2KeyPair:
    allowedPattern: ^[\x00-\x7F]{0,255}$
    default: ''
    description: (Optional) Key pair to be used for the new HANA node. If left blank, the key pair will be inferred from parent deployment.
    maxChars: 255
    type: String
  PrivateIp:
    allowedPattern: (^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$|^$)
    default: ''
    description: (Optional) Private IP address to use. If left blank, a private IP address will be automatically assigned from the subnets available pool.
    type: String
  DisableDeploymentRollback:
    allowedValues:
      - 'True'
      - 'False'
    default: 'True'
    description: Disable rollback on failure.
    type: String
  ScriptFailureBehavior:
    allowedValues:
      - CONTINUE
      - ROLLBACK
    default: ROLLBACK
    description: Action to take if any issues are encountering during pre/post script setup.
    type: String
  PreDeploymentScript:
    allowedPattern: ^(s3://[a-z0-9\-\.\/]+)?$
    default: ''
    description: '(Optional) Full s3 URI path of pre-deployment script. Example format: s3://example-bucket-name/script.sh'
    type: String
  PostDeploymentScript:
    allowedPattern: ^(s3://[a-z0-9\-\.\/]+)?$
    default: ''
    description: '(Optional) Full s3 URI path of post-deployment script. Example format: s3://example-bucket-name/script.sh'
    type: String
mainSteps:
  - name: GetParentDeploymentName
    action: aws:runCommand
    nextStep: GetDeploymentId
    isEnd: false
    inputs:
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          parentDeploymentName=$(aws ec2 describe-instances --instance-ids {{ HanaPrimaryInstanceId }} --query 'Reservations[*].Instances[*].Tags[?Key==`aws:cloudformation:stack-name`].Value' --region {{global:REGION}} --output text)

          if [ -z "$parentDeploymentName" ]; then
            echo "Failed to get parent deployment ID."
            exit 1
          fi

          echo -n $parentDeploymentName
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: GetDeploymentId
    action: aws:runCommand
    nextStep: GetDeploymentSpecifications
    isEnd: false
    inputs:
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          parentDeploymentName={{ GetParentDeploymentName.Output }}
          appName="${parentDeploymentName#LaunchWizard-}"

          # Initialize variables
          deploymentList=()
          next_token=""

          # Loop through all pages
          while true; do
              # Call the AWS CLI command and store the output in a variable
              if [ -z "$next_token" ]; then
                  output=$(aws launch-wizard list-deployments --max-items 100 --page-size 100)
              else
                  output=$(aws launch-wizard list-deployments --max-items 100 --page-size 100 --starting-token "$next_token")
              fi

              # Extract the deployments list from the output
              deployments=$(echo "$output" | jq -r '.deployments')

              # Append the deployments to the list variable
              deploymentList+=("$deployments")

              # Check if there is a next token in the response
              next_token=$(echo "$output" | jq -r '.NextToken')

              # If there is no next token, exit the loop
              if [ -z "$next_token" ] || [ "$next_token" == "null" ]; then
                  break
              fi
          done

          # Filter the list for the object with specified application name
          applicationObject=$(echo "${deploymentList[@]}" | jq --arg appName "$appName" -r '.[] | select(.name == $appName)')

          if [ -z "$applicationObject" ]; then
              echo "No deployment with name ${appName} found."
              exit 1
          else
              deploymentId=$(echo "$applicationObject" | jq -r '.id')
          fi

          if [ -z "$deploymentId" ]; then
            echo "Failed to identify deployment ID for ${appName}."
            exit 1
          fi

          echo -n $deploymentId
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: GetDeploymentSpecifications
    action: aws:executeAwsApi
    nextStep: CreateCfnStackName
    isEnd: false
    inputs:
      Service: launch-wizard
      Api: GetDeployment
      deploymentId: '{{ GetDeploymentId.Output }}'
    outputs:
      - Name: deploymentName
        Selector: $.deployment.name
        Type: String
      - Name: DatabaseSecurityGroupId
        Selector: $.deployment.specifications.DatabaseSecurityGroupId
        Type: String
      - Name: KeyPairName
        Selector: $.deployment.specifications.KeyPairName
        Type: String
  - name: CreateCfnStackName
    action: aws:runCommand
    nextStep: SetActionId
    isEnd: false
    inputs:
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          ## Set CFN stack name for execution
          cfnStackName={{ GetParentDeploymentName.Output }}-{{ HanaDbWorkerHostname }}

          echo -n $cfnStackName
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: SetActionId
    action: aws:runCommand
    nextStep: GetKeyPairName
    isEnd: false
    inputs:
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash

          ## Set ActionId.
          addActionIdPrefix='A'
          generatedUuid=$(uuidgen)

          # Ex. A-7e8ab1dc-39fe-4979-8243-2ad2bc507b3a
          actionId=$addActionIdPrefix-$generatedUuid

          echo -n $actionId
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: GetKeyPairName
    action: aws:runCommand
    nextStep: GetDbSecurityGroup
    isEnd: false
    inputs:
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          ec2KeyPair={{ Ec2KeyPair }}

          ## If EC2 Key Pair name was not provided, attempt to identify from deployment specifications
          if [ ! -n "$ec2KeyPair" ]; then
            ec2KeyPair={{ GetDeploymentSpecifications.KeyPairName }}
          fi

          echo -n $ec2KeyPair
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: GetDbSecurityGroup
    action: aws:runCommand
    nextStep: GetConfigurationScripts
    isEnd: false
    inputs:
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          hanaDbSecurityGroup={{ HanaDbSecurityGroup }}
          parentDeploymentName={{ GetParentDeploymentName.Output }}

          ## If DB Security Group ID was not provided, attempt to identify from deployment specifications
          #if [ ! -n "$hanaDbSecurityGroup" ]; then
          #  ## Check whether an existing SG was utilized or if a new one was created
          #  if [ -v "{{ GetDeploymentSpecifications.DatabaseSecurityGroupId }}" ]; then
          #    hanaDbSecurityGroup={{ GetDeploymentSpecifications.DatabaseSecurityGroupId }}
          #  else
          #    hanaDbSecurityGroup=$(aws cloudformation describe-stack-resources --stack-name ${parentDeploymentName} --logical-resource-id NewDBSecurityGroup --query 'StackResources[0].PhysicalResourceId' --region {{global:REGION}} --output text)
          #  fi
          #fi

          # MT: If Security Group ID was not provided, attempt to identify from source instance
          if [ ! -n "$hanaDbSecurityGroup" ]; then
            #Determine IMDSv1 or IMDSv2
            METADATA_RESPONSE=$(curl --write-out '%{http_code}' --silent --output /dev/null http://169.254.169.254/latest/meta-data/)
            HEADER=""
            if [ $METADATA_RESPONSE -ne 200 ]; then
            echo -n "Use IMDSv2!"
            TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
            HEADER="X-aws-ec2-metadata-token: $TOKEN"
            fi

            mac=$(curl --header "$HEADER" --silent http://169.254.169.254/latest/meta-data/mac)
            hanaDbSecurityGroup=$(curl --header "$HEADER" --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/${mac}/security-group-ids)
          fi

          if [ -z "$hanaDbSecurityGroup" ]; then
              echo "Unable to identify security group ID."
              exit 1
          fi

          echo -n $hanaDbSecurityGroup | sed -e "s/ /,/g" 
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: GetConfigurationScripts
    action: aws:runCommand
    nextStep: DiscoverAndChecks
    isEnd: false
    inputs:
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          ## Set initial variable values from automation inputs
          preDeploymentScript={{ PreDeploymentScript }}
          postDeploymentScript={{ PostDeploymentScript }}
          scriptFailureBehavior={{ ScriptFailureBehavior }}

          ## Set ConfigurationScripts based on input
          configurationScripts='{
            "preConfigurationScripts": {
              "configurationScripts": [],
              "onFailureBehaviour": "'$scriptFailureBehavior'",
              "timeoutInMinutes": 0
            },
            "postConfigurationScripts": {
              "configurationScripts": [],
              "onFailureBehaviour": "'$scriptFailureBehavior'",
              "timeoutInMinutes": 0
            }
          }'

          ## Update configurationScripts if s3 URI was passed for pre-deployment scripts.
          if [[ -n "$preDeploymentScript" ]]; then
            configurationScripts=$(echo $configurationScripts | jq --arg key "sequence" '.preConfigurationScripts.configurationScripts[0][$key] = 0')
            configurationScripts=$(echo $configurationScripts | jq --arg key "s3URL" --arg value $preDeploymentScript '.preConfigurationScripts.configurationScripts[0][$key] = $value')
            configurationScripts=$(echo $configurationScripts | jq --arg key "nodeTypesToRunScriptFor" '.preConfigurationScripts.configurationScripts[0][$key] = ["DB"]')
          fi

          ## Update configurationScripts if s3 URI was passed for post-deployment scripts.
          if [[ -n "$postDeploymentScript" ]]; then
            configurationScripts=$(echo $configurationScripts | jq --arg key "sequence" '.postConfigurationScripts.configurationScripts[0][$key] = 0')
            configurationScripts=$(echo $configurationScripts | jq --arg key "s3URL" --arg value $postDeploymentScript '.postConfigurationScripts.configurationScripts[0][$key] = $value')
            configurationScripts=$(echo $configurationScripts | jq --arg key "nodeTypesToRunScriptFor" '.postConfigurationScripts.configurationScripts[0][$key] = ["DB"]')
          fi

          echo -n $configurationScripts
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: DiscoverAndChecks
    action: aws:runCommand
    maxAttempts: 1
    timeoutSeconds: 600
    nextStep: GetInstanceProfile
    isEnd: false
    inputs:
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          # declare
          checkDbSecurityGroup=true
          PrivateIp={{ PrivateIp }}
          parentDeploymentName={{ GetParentDeploymentName.Output }}
          HanaWorkerHostname={{ HanaDbWorkerHostname }}
          HanaDbSecurityGroup={{ GetDbSecurityGroup.Output }}

          # Create temp working directory
          mkdir -p /root/install/add-hana-worker/{{ SetActionId.Output }}
          WORKDIR=/root/install/add-hana-worker/{{ SetActionId.Output }}

          # check if hana install is set to true
          is_hana_installed_in_parent=$(aws cloudformation describe-stacks --stack-name ${parentDeploymentName} --query "Stacks[*].Parameters[?ParameterKey=='InstallHANA'].ParameterValue" --region {{global:REGION}} --output text)

          if [[ ${is_hana_installed_in_parent} == "No" ]]; then
            echo "Adding nodes is only possible if sap application is installed in the parent deployment...HANA Installed=....${is_hana_installed_in_parent}..."
            exit 8
          fi

          # derive from parent CFN stack
          db_inst_num=$(aws cloudformation describe-stacks --stack-name  ${parentDeploymentName} --query "Stacks[*].Parameters[?ParameterKey=='SAPInstanceNum'].ParameterValue" --region {{global:REGION}} --output text)
          db_master_hostname=$(aws cloudformation describe-stacks --stack-name ${parentDeploymentName} --query "Stacks[*].Parameters[?ParameterKey=='HANAHostname'].ParameterValue" --region {{global:REGION}} --output text)

          if [[ -f "/usr/sap/hostctrl/exe/sapcontrol" ]]; then
              /usr/sap/hostctrl/exe/sapcontrol -nr ${db_inst_num} -host ${db_master_hostname} -function GetSystemInstanceList | egrep 'GREEN|GRAY' | cut -d, -f1,2,6,7 --output-delimiter=' ' >> ${WORKDIR}/SapcontrolSystemList.txt
          else    
              echo "/usr/sap/hostctrl/exe/sapcontrol not found...exiting"
              exit 1
          fi

          while read -r line; do
              SapControlArray=($line)
              SapControlArray[4]=$(ping -c 1 ${SapControlArray[0]} | grep data | cut -d"(" -f2 | cut -d")" -f1)

              # if instance not reachable
              if [[ -z ${SapControlArray[4]} ]]; then
                echo "instance ${SapControlArray[0]} is not reachable via ping or instance not running...exiting..."
                exit 2
              fi

              SapControlArray[5]=$(aws ec2 describe-instances --filter Name=private-ip-address,Values=${SapControlArray[4]} --query 'Reservations[].Instances[].InstanceId' --region {{global:REGION}} --output text)
              SapControlArray[6]=$(aws ec2 describe-instances --filter Name=private-ip-address,Values=${SapControlArray[4]} --query 'Reservations[].Instances[].InstanceType' --region {{global:REGION}} --output text)
              SapControlArray[7]=$(aws ec2 describe-instances --filter Name=private-ip-address,Values=${SapControlArray[4]} --query 'Reservations[].Instances[].SecurityGroups[].GroupId' --region {{global:REGION}} --output text)
              echo ${SapControlArray[*]} >> ${WORKDIR}/SapSystemList.txt

              # check if application is not running on any instance
              if [[ ${SapControlArray[3]} == "GRAY" ]]; then
                echo "Database on instance ${SapControlArray[0]} is not running...exiting..."
                exit 4
              fi

              # check if hostname is same as the new instance that is getting spun up
              if [[ ${SapControlArray[0]} == ${HanaWorkerHostname} ]]; then
                echo "instance exists with the same hostname ${HanaWorkerHostname}...exiting..."
                exit 5
              fi

              # check if ip is same as the new instance that is getting spun up
              if [[ ! -z ${PrivateIp} ]]; then
                if [[ ${SapControlArray[4]} == ${PrivateIp} ]]; then
                  echo "instance exists with the same ip ${PrivateIp}...exiting..."
                  exit 7
                fi
              fi

              # check if security group provided is same as the one for exising db instance 
              if [[ (${checkDbSecurityGroup}) && (${SapControlArray[2]} == "HDB|HDB_WORKER") ]]; then
                if [[ ! ${SapControlArray[7]} =~ ${HanaDbSecurityGroup} ]]; then
                  echo "Security group does not match with the security group of existing instance ${SapControlArray[0]}...exiting..."
                  exit 8
                fi
              fi
              TotalInstanceList+="${SapControlArray[5]} "
          done < ${WORKDIR}/SapcontrolSystemList.txt
          unset SapControlArray
          echo ${TotalInstanceList}

          # check if password can be read
          aws secretsmanager get-secret-value --secret-id {{ HanaDbPasswordSecretKey }} --region {{global:REGION}} > /dev/null
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: GetInstanceProfile
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 60
    nextStep: GetSubnetId
    isEnd: false
    inputs:
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          aws ec2 describe-instances --filter Name=instance-id,Values={{ HanaPrimaryInstanceId }} --query 'Reservations[].Instances[].IamInstanceProfile.Arn' --region {{global:REGION}} --output text | cut -d "/" -f2 | tr -d '\n'
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: GetSubnetId
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 60
    nextStep: GetInstanceType
    isEnd: false
    inputs:
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          aws ec2 describe-instances --filter Name=instance-id,Values={{ HanaPrimaryInstanceId }} --query 'Reservations[].Instances[].SubnetId' --region {{global:REGION}} --output text | tr -d '\n'
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: GetInstanceType
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 60
    nextStep: GetDnsParameterList
    isEnd: false
    inputs:
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          aws ec2 describe-instances --filter Name=instance-id,Values={{ HanaPrimaryInstanceId }} --query 'Reservations[].Instances[].InstanceType' --region {{global:REGION}} --output text  | tr -d '\n'
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: GetDnsParameterList
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 60
    nextStep: GetHanaDataVolumeType
    isEnd: false
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          # Derive DNS Type from parent stack
          DNSParameterList=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query "Stacks[*].Parameters[?ParameterKey=='DNSParameterList'].ParameterValue" --region {{global:REGION}} --output text | tr -d '\n')
          [[ -z "$DNSParameterList" ]] && DNSParameterList=local || DNSParameterList=${DNSParameterList}
          echo -n ${DNSParameterList}
  - name: GetHanaDataVolumeType
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 60
    nextStep: BranchIfFsxVolumeType
    isEnd: false
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          # Derive HanaData Volume type from Parent Stack
          HanaDataVolumeType=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query "Stacks[*].Parameters[?ParameterKey=='VolumeTypeHanaData'].ParameterValue" --region {{global:REGION}} --output text | tr -d '\n')
          echo -n ${HanaDataVolumeType}
  - name: BranchIfFsxVolumeType
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetFsxInformation
          Variable: '{{ GetHanaDataVolumeType.Output }}'
          StringEquals: fsx
      Default: CreateEc2Instance
  - name: GetFsxInformation
    action: aws:runCommand
    nextStep: CreateEc2Instance
    isEnd: false
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          function get_mount_number() {
              count=1
              mount_array=($(df -h | grep " /hana/data/HDB/mnt" | awk '{print $6}' | cut -d "/" -f5 | cut -c 4- | awk '{print $1 + 0}'))
              for i in ${mount_array[@]}
              do
                  if [[ ${count} -ne ${i} ]]; then 
                      printf "%05d\n" ${count}
                      exit
                  fi
                  ((count++))
              done
              printf "%05d\n" ${count}
          }

          mount_number=$(get_mount_number)
          IsServiceRole=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query "Stacks[*].Parameters[?ParameterKey=='IsServiceRole'].ParameterValue" --region {{global:REGION}} --output text | tr -d '\n')
          HANAFsxTotalVolumeSize=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query "Stacks[*].Parameters[?ParameterKey=='HANAFsxTotalVolumeSize'].ParameterValue" --region {{global:REGION}} --output text | tr -d '\n')
          HANAFsxDataVolumeSize=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query "Stacks[*].Parameters[?ParameterKey=='HANAFsxDataVolumeSize'].ParameterValue" --region {{global:REGION}} --output text | tr -d '\n')
          HANAFsxLogVolumeSize=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query "Stacks[*].Parameters[?ParameterKey=='HANAFsxLogVolumeSize'].ParameterValue" --region {{global:REGION}} --output text | tr -d '\n')
          HANASID=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query "Stacks[*].Parameters[?ParameterKey=='HANASID'].ParameterValue" --region {{global:REGION}} --output text| tr -d '\n')

          echo -n "${IsServiceRole},${mount_number},${HANAFsxTotalVolumeSize},${HANAFsxDataVolumeSize},${HANAFsxLogVolumeSize},${HANASID}"
  - name: CreateEc2Instance
    action: aws:createStack
    nextStep: GetInstanceId
    isEnd: false
    inputs:
      StackName: '{{ CreateCfnStackName.Output }}'
      TemplateBody: |-
        {
            "AWSTemplateFormatVersion": "2010-09-09",
            "Description": "Deploy a Single EC2 Instance",
            "Parameters": {
                "Ec2KeyPair": {
                    "Type": "AWS::EC2::KeyPair::KeyName",
                    "Default": "home",
                    "Description": "Name of an existing Amazon EC2 key pair."
                },
                "Ec2AmiId": {
                    "Type": "String",
                    "Description": "EC2 Linux AMI ID for HANA master and worker nodes."
                },
                "Ec2InstanceType": {
                    "Type": "String",
                    "Description": "Instance type for SAP HANA host.",
                    "Default": "r5.2xlarge"
                },
                "Ec2IAMProfile": {
                    "Type": "String",
                    "Description": "IAM profile"
                },
                "Ec2SecurityGroup": {
                    "Type": "String",
                    "Description": "SG"
                },
                "Ec2Subnet": {
                    "Type": "String",
                    "Description": "Subnet"
                },
                "Byoip": {
                    "Type": "String",
                    "Description": "Byoip",
                    "Default": ""
                },
                "DNSParameterList": {
                    "Type": "CommaDelimitedList",
                    "Description": "Name to use for fully qualified domain names.",
                    "Default": ""
                },
                "VolumeType": {
                    "Type": "String",
                    "Description": "Volume type",
                    "Default": ""
                },
                "FsxParameters": {
                    "Type": "CommaDelimitedList",
                    "Description": "FSx parameters to be used",
                    "Default": ""
                },
                "ParentDeploymentName": {
                    "Type": "String",
                    "Description": "Full name of the parent deployment.",
                    "Default": ""
                },
                "HanaDbWorkerHostname": {
                    "Type": "String",
                    "Description": "Host name to use for SAP HANA worker node (DNS short name)."
                }
            },
            "Conditions": {
                "isByoip": {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                "",
                                {
                                    "Ref": "Byoip"
                                }
                            ]
                        }
                    ]
                },
                "EnableRoute53": {
                    "Fn::Equals": [
                        {
                            "Fn::Select": [
                                0,
                                {
                                    "Ref": "DNSParameterList"
                                }
                            ]
                        },
                        "Route53"
                    ]
                },
                "isFsx": {
                    "Fn::Equals": [
                        {
                            "Ref": "VolumeType"
                        },
                        "fsx"
                    ]
                },
                "ServiceRoleYes": {
                    "Fn::And": [
                        {
                            "Fn::Equals": [
                                {
                                    "Fn::Select": [
                                        0,
                                        {
                                            "Ref": "FsxParameters"
                                        }
                                    ]
                                },
                                "Yes"
                            ]
                        },
                        {
                            "Condition": "isFsx"
                        }
                    ]
                },
                "ServiceRoleNo": {
                    "Fn::And": [
                        {
                            "Fn::Equals": [
                                {
                                    "Fn::Select": [
                                        0,
                                        {
                                            "Ref": "FsxParameters"
                                        }
                                    ]
                                },
                                "No"
                            ]
                        },
                        {
                            "Condition": "isFsx"
                        }
                    ]
                }
            },
            "Mappings": {
                "AWSLaunchWizardTags": {
                    "SourceTag": {
                        "Key": "SourceTemplate",
                        "Value": "AWSLaunchWizard"
                    },
                    "ApplicationTypeTag": {
                        "Key": "LaunchWizardApplicationType",
                        "SAPValue": "SAP",
                        "SQLValue": "SQL_SERVER",
                        "ADValue": "ACTIVE_DIRECTORY",
                        "LINUXValue": "SQL_SERVER_LINUX"
                    }
                }
            },
            "Resources": {
                "Ec2Instance": {
                    "Type": "AWS::EC2::Instance",
                    "Properties": {
                        "Monitoring": true,
                        "KeyName": {
                            "Ref": "Ec2KeyPair"
                        },
                        "ImageId": {
                            "Ref": "Ec2AmiId"
                        },
                        "IamInstanceProfile": {
                            "Ref": "Ec2IAMProfile"
                        },
                        "UserData": {
                            "Fn::Base64": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "#!/bin/bash -xv\n",
                                        "systemctl restart amazon-ssm-agent\n"
                                    ]
                                ]
                            }
                        },
                        "InstanceType": {
                            "Ref": "Ec2InstanceType"
                        },
                        "SubnetId": {
                            "Ref": "Ec2Subnet"
                        },
                        "PrivateIpAddress": {
                            "Fn::If": [
                                "isByoip",
                                {
                                    "Ref": "Byoip"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "SecurityGroupIds": [
                            {
                                "Ref": "Ec2SecurityGroup"
                            }
                        ],
                        "Tags": [
                            {
                                "Key": "Name",
                                "Value": {
                                    "Fn::Join": [
                                        "-",
                                        [
                                            {
                                                "Ref": "ParentDeploymentName"
                                            },
                                            "HANA Database",
                                            {
                                                "Ref": "HanaDbWorkerHostname"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Key": {
                                    "Fn::FindInMap": [
                                        "AWSLaunchWizardTags",
                                        "SourceTag",
                                        "Key"
                                    ]
                                },
                                "Value": {
                                    "Fn::FindInMap": [
                                        "AWSLaunchWizardTags",
                                        "SourceTag",
                                        "Value"
                                    ]
                                }
                            },
                            {
                                "Key": {
                                    "Fn::FindInMap": [
                                        "AWSLaunchWizardTags",
                                        "ApplicationTypeTag",
                                        "Key"
                                    ]
                                },
                                "Value": {
                                    "Fn::FindInMap": [
                                        "AWSLaunchWizardTags",
                                        "ApplicationTypeTag",
                                        "SAPValue"
                                    ]
                                }
                            }
                        ]
                    }
                },
                "R53Record": {
                    "Condition": "EnableRoute53",
                    "Type": "AWS::Route53::RecordSet",
                    "DependsOn": "Ec2Instance",
                    "Properties": {
                        "HostedZoneName": {
                            "Fn::Select": [
                                1,
                                {
                                    "Ref": "DNSParameterList"
                                }
                            ]
                        },
                        "Name": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "HanaDbWorkerHostname"
                                    },
                                    ".",
                                    {
                                        "Fn::Select": [
                                            1,
                                            {
                                                "Ref": "DNSParameterList"
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "Type": "A",
                        "TTL": 60,
                        "ResourceRecords": [
                            {
                                "Fn::GetAtt": [
                                    "Ec2Instance",
                                    "PrivateIp"
                                ]
                            }
                        ]
                    }
                },
                "AutoRecoverAlarmMaster": {
                    "Type": "AWS::CloudWatch::Alarm",
                    "Properties": {
                        "AlarmName": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "AutoRecoverAlarmMaster"
                                ]
                            ]
                        },
                        "AlarmDescription": "Trigger a recovery when instance status check fails for 5 consecutive minute.",
                        "Namespace": "AWS/EC2",
                        "MetricName": "StatusCheckFailed_System",
                        "Statistic": "Minimum",
                        "Period": 60,
                        "EvaluationPeriods": 5,
                        "ComparisonOperator": "GreaterThanThreshold",
                        "Threshold": 0,
                        "AlarmActions": [
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":automate:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":ec2:recover"
                                    ]
                                ]
                            }
                        ],
                        "Dimensions": [
                            {
                                "Name": "InstanceId",
                                "Value": {
                                    "Ref": "Ec2Instance"
                                }
                            }
                        ]
                    }
                },
                "FsxAdmin": {
                    "Type": "AWS::SecretsManager::Secret",
                    "Properties": {
                        "Description": "Admin password for ONTAP",
                        "GenerateSecretString": {
                            "ExcludeCharacters": "\"@/\\",
                            "GenerateStringKey": "password",
                            "PasswordLength": 8,
                            "SecretStringTemplate": "{\"username\":\"fsxadmin\"}"
                        },
                        "Name": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "fsxadmin"
                                ]
                            ]
                        }
                    },
                    "Condition": "isFsx"
                },
                "FsxAdminSecretResourcePolicyServiceRole": {
                    "Type": "AWS::SecretsManager::ResourcePolicy",
                    "Properties": {
                        "ResourcePolicy": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Resource": "*",
                                    "Action": [
                                        "secretsmanager:GetSecretValue",
                                        "secretsmanager:CreateSecret",
                                        "secretsmanager:GetRandomPassword"
                                    ],
                                    "Effect": "Allow",
                                    "Principal": {
                                        "AWS": {
                                            "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/service-role/AmazonEC2RoleForLaunchWizard"
                                        }
                                    }
                                }
                            ]
                        },
                        "SecretId": {
                            "Ref": "FsxAdmin"
                        }
                    },
                    "Condition": "ServiceRoleYes"
                },
                "FsxAdminSecretResourcePolicyCustomeRole": {
                    "Type": "AWS::SecretsManager::ResourcePolicy",
                    "Properties": {
                        "ResourcePolicy": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Resource": "*",
                                    "Action": [
                                        "secretsmanager:GetSecretValue",
                                        "secretsmanager:CreateSecret",
                                        "secretsmanager:GetRandomPassword"
                                    ],
                                    "Effect": "Allow",
                                    "Principal": {
                                        "AWS": {
                                            "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/AmazonEC2RoleForLaunchWizard"
                                        }
                                    }
                                }
                            ]
                        },
                        "SecretId": {
                            "Ref": "FsxAdmin"
                        }
                    },
                    "Condition": "ServiceRoleNo"
                },
                "FsxOntapForHanaSecondary": {
                    "Type": "AWS::FSx::FileSystem",
                    "Properties": {
                        "FileSystemType": "ONTAP",
                        "SubnetIds": [
                            {
                                "Ref": "Ec2Subnet"
                            }
                        ],
                        "OntapConfiguration": {
                            "AutomaticBackupRetentionDays": 0,
                            "DeploymentType": "SINGLE_AZ_1",
                            "FsxAdminPassword": {
                                "Fn::Join": [
                                    ":",
                                    [
                                        "{{resolve:secretsmanager",
                                        {
                                            "Ref": "FsxAdmin"
                                        },
                                        "SecretString:password}}"
                                    ]
                                ]
                            },
                            "ThroughputCapacity": 1024
                        },
                        "SecurityGroupIds": [
                            {
                                "Ref": "Ec2SecurityGroup"
                            }
                        ],
                        "StorageCapacity": {
                            "Fn::Select": [
                                2,
                                {
                                    "Ref": "FsxParameters"
                                }
                            ]
                        },
                        "StorageType": "SSD",
                        "Tags": [
                            {
                                "Key": "Name",
                                "Value": {
                                    "Fn::Join": [
                                        ":",
                                        [
                                            {
                                                "Ref": "ParentDeploymentName"
                                            },
                                            "FsxOntapForHana",
                                            {
                                                "Ref": "HanaDbWorkerHostname"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Key": {
                                    "Fn::FindInMap": [
                                        "AWSLaunchWizardTags",
                                        "SourceTag",
                                        "Key"
                                    ]
                                },
                                "Value": {
                                    "Fn::FindInMap": [
                                        "AWSLaunchWizardTags",
                                        "SourceTag",
                                        "Value"
                                    ]
                                }
                            },
                            {
                                "Key": {
                                    "Fn::FindInMap": [
                                        "AWSLaunchWizardTags",
                                        "ApplicationTypeTag",
                                        "Key"
                                    ]
                                },
                                "Value": {
                                    "Fn::FindInMap": [
                                        "AWSLaunchWizardTags",
                                        "ApplicationTypeTag",
                                        "SAPValue"
                                    ]
                                }
                            }
                        ]
                    },
                    "UpdateReplacePolicy": "Delete",
                    "DeletionPolicy": "Delete",
                    "Condition": "isFsx"
                },
                "HanaDataStorageVirtualMachineSecondary": {
                    "Type": "AWS::FSx::StorageVirtualMachine",
                    "Properties": {
                        "FileSystemId": {
                            "Ref": "FsxOntapForHanaSecondary"
                        },
                        "Name": {
                            "Fn::Join": [
                                "-",
                                [
                                    "HanaDataSVMSecondary",
                                    {
                                        "Ref": "HanaDbWorkerHostname"
                                    }
                                ]
                            ]
                        },
                        "RootVolumeSecurityStyle": "UNIX",
                        "SvmAdminPassword": {
                            "Fn::Join": [
                                ":",
                                [
                                    "{{resolve:secretsmanager",
                                    {
                                        "Ref": "FsxAdmin"
                                    },
                                    "SecretString:password}}"
                                ]
                            ]
                        }
                    },
                    "UpdateReplacePolicy": "Delete",
                    "DeletionPolicy": "Delete",
                    "Condition": "isFsx"
                },
                "HanaDataVolumeSecondary": {
                    "Type": "AWS::FSx::Volume",
                    "Properties": {
                        "Name": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::Select": [
                                            5,
                                            {
                                                "Ref": "FsxParameters"
                                            }
                                        ]
                                    },
                                    "_data_mnt",
                                    {
                                        "Fn::Select": [
                                            1,
                                            {
                                                "Ref": "FsxParameters"
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "OntapConfiguration": {
                            "JunctionPath": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "/",
                                        {
                                            "Fn::Select": [
                                                5,
                                                {
                                                    "Ref": "FsxParameters"
                                                }
                                            ]
                                        },
                                        "_data_mnt",
                                        {
                                            "Fn::Select": [
                                                1,
                                                {
                                                    "Ref": "FsxParameters"
                                                }
                                            ]
                                        }
                                    ]
                                ]
                            },
                            "SizeInMegabytes": {
                                "Fn::Select": [
                                    3,
                                    {
                                        "Ref": "FsxParameters"
                                    }
                                ]
                            },
                            "StorageEfficiencyEnabled": "false",
                            "StorageVirtualMachineId": {
                                "Ref": "HanaDataStorageVirtualMachineSecondary"
                            }
                        },
                        "VolumeType": "ONTAP"
                    },
                    "UpdateReplacePolicy": "Delete",
                    "DeletionPolicy": "Delete",
                    "Condition": "isFsx"
                },
                "HanaLogStorageVirtualMachineSecondary": {
                    "Type": "AWS::FSx::StorageVirtualMachine",
                    "Properties": {
                        "FileSystemId": {
                            "Ref": "FsxOntapForHanaSecondary"
                        },
                        "Name": {
                            "Fn::Join": [
                                "-",
                                [
                                    "HanaLogSVMSecondary",
                                    {
                                        "Ref": "HanaDbWorkerHostname"
                                    }
                                ]
                            ]
                        },
                        "RootVolumeSecurityStyle": "UNIX",
                        "SvmAdminPassword": {
                            "Fn::Join": [
                                ":",
                                [
                                    "{{resolve:secretsmanager",
                                    {
                                        "Ref": "FsxAdmin"
                                    },
                                    "SecretString:password}}"
                                ]
                            ]
                        }
                    },
                    "UpdateReplacePolicy": "Delete",
                    "DeletionPolicy": "Delete",
                    "Condition": "isFsx"
                },
                "HanaLogVolumeSecondary": {
                    "Type": "AWS::FSx::Volume",
                    "Properties": {
                        "Name": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Fn::Select": [
                                            5,
                                            {
                                                "Ref": "FsxParameters"
                                            }
                                        ]
                                    },
                                    "_log_mnt",
                                    {
                                        "Fn::Select": [
                                            1,
                                            {
                                                "Ref": "FsxParameters"
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "OntapConfiguration": {
                            "JunctionPath": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "/",
                                        {
                                            "Fn::Select": [
                                                5,
                                                {
                                                    "Ref": "FsxParameters"
                                                }
                                            ]
                                        },
                                        "_log_mnt",
                                        {
                                            "Fn::Select": [
                                                1,
                                                {
                                                    "Ref": "FsxParameters"
                                                }
                                            ]
                                        }
                                    ]
                                ]
                            },
                            "SizeInMegabytes": {
                                "Fn::Select": [
                                    4,
                                    {
                                        "Ref": "FsxParameters"
                                    }
                                ]
                            },
                            "StorageEfficiencyEnabled": "false",
                            "StorageVirtualMachineId": {
                                "Ref": "HanaLogStorageVirtualMachineSecondary"
                            }
                        },
                        "VolumeType": "ONTAP"
                    },
                    "UpdateReplacePolicy": "Delete",
                    "DeletionPolicy": "Delete",
                    "Condition": "isFsx"
                }
            }
        }
      DisableRollback: true
      TimeoutInMinutes: 60
      Parameters:
        - ParameterKey: Ec2KeyPair
          ParameterValue: '{{ GetKeyPairName.Output }}'
        - ParameterKey: Ec2AmiId
          ParameterValue: '{{ HanaDbAmiId }}'
        - ParameterKey: Ec2InstanceType
          ParameterValue: '{{ GetInstanceType.Output }}'
        - ParameterKey: Ec2IAMProfile
          ParameterValue: '{{ GetInstanceProfile.Output }}'
        - ParameterKey: Ec2SecurityGroup
          ParameterValue: '{{ GetDbSecurityGroup.Output }}'
        - ParameterKey: Ec2Subnet
          ParameterValue: '{{ GetSubnetId.Output }}'
        - ParameterKey: Byoip
          ParameterValue: '{{ PrivateIp }}'
        - ParameterKey: DNSParameterList
          ParameterValue: '{{ GetDnsParameterList.Output }}'
        - ParameterKey: VolumeType
          ParameterValue: '{{ GetHanaDataVolumeType.Output }}'
        - ParameterKey: FsxParameters
          ParameterValue: '{{ GetFsxInformation.Output }}'
        - ParameterKey: ParentDeploymentName
          ParameterValue: '{{ GetParentDeploymentName.Output }}'
        - ParameterKey: HanaDbWorkerHostname
          ParameterValue: '{{ HanaDbWorkerHostname }}'
  - name: GetInstanceId
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 60
    nextStep: GetInstanceIp
    isEnd: false
    onCancel: step:DeleteOnFailure
    onFailure: step:DeleteOnFailure
    inputs:
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          aws cloudformation describe-stack-resources --stack-name {{ CreateCfnStackName.Output }} --query 'StackResources[?ResourceType==`AWS::EC2::Instance`].PhysicalResourceId' --region {{global:REGION}} --output text | tr -d '\n'
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
  - name: GetInstanceIp
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 180
    nextStep: BranchIfFsxVolumeType1
    isEnd: false
    onCancel: step:DeleteOnFailure
    onFailure: step:DeleteOnFailure
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ GetInstanceId.Output }}'
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          hostnamectl set-hostname --static {{ HanaDbWorkerHostname }}
          _ip=$(ip -4 addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | tr -d '\n')
          echo -n ${_ip}
  - name: BranchIfFsxVolumeType1
    action: aws:branch
    inputs:
      Choices:
        - NextStep: GetOntapSvmsDns
          Variable: '{{ GetHanaDataVolumeType.Output }}'
          StringEquals: fsx
      Default: UpdateEtcHostsOnMaster
  - name: GetOntapSvmsDns
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 60
    nextStep: UpdateEtcHostsOnMaster
    isEnd: false
    onCancel: step:DeleteOnFailure
    onFailure: step:DeleteOnFailure
    inputs:
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          datasvm=$(aws cloudformation describe-stack-resources --stack-name {{ CreateCfnStackName.Output }} --logical-resource-id HanaDataStorageVirtualMachineSecondary --region {{global:REGION}} | grep PhysicalResourceId | cut -d':' -f2 | cut -d"\"" -f2 | tr -d '\n')
          dataDns=$(aws fsx describe-storage-virtual-machines --storage-virtual-machine-ids ${datasvm} --query 'StorageVirtualMachines[].Endpoints[].Nfs[].DNSName' --region {{global:REGION}} --output text | tr -d '\n')
          logsvm=$(aws cloudformation describe-stack-resources --stack-name {{ CreateCfnStackName.Output }} --logical-resource-id HanaLogStorageVirtualMachineSecondary --region {{global:REGION}} | grep PhysicalResourceId | cut -d':' -f2 | cut -d"\"" -f2 | tr -d '\n')
          logDns=$(aws fsx describe-storage-virtual-machines --storage-virtual-machine-ids ${logsvm} --query 'StorageVirtualMachines[].Endpoints[].Nfs[].DNSName' --region {{global:REGION}} --output text | tr -d '\n')

          echo -n "${dataDns},${logDns}"
      InstanceIds:
        - '{{ GetInstanceId.Output }}'
  - name: UpdateEtcHostsOnMaster
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 60
    nextStep: SyncEtcHostsFromMaster
    isEnd: false
    onCancel: step:DeleteOnFailure
    onFailure: step:DeleteOnFailure
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ HanaPrimaryInstanceId }}'
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          DnsParams={{ GetDnsParameterList.Output }}

          if [[ ${DnsParams} == "local" ]]; then
            Dns=local
          else
            Dns=$(echo ${DnsParams} | cut -d',' -f2)
          fi

          echo "{{GetInstanceIp.Output}}   {{ HanaDbWorkerHostname }}.${Dns}   {{ HanaDbWorkerHostname }}" >> /etc/hosts
          cp /etc/hosts /hana/shared/hosts
  - name: SyncEtcHostsFromMaster
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 60
    nextStep: CheckFileSystems
    isEnd: false
    onCancel: step:DeleteOnFailure
    onFailure: step:DeleteOnFailure
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ GetInstanceId.Output }}'
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          mount -a
          fgrep -vxf /etc/hosts /hana/shared/hosts >>/etc/hosts
          rm -f /hana/shared/hosts
  - name: CheckFileSystems
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 60
    nextStep: InstallJq
    isEnd: false
    onCancel: step:DeleteOnFailure
    onFailure: step:DeleteOnFailure
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ GetInstanceId.Output }}'
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          DnsParams={{ GetDnsParameterList.Output }}
          if [[ ${DnsParams} == "local" ]]; then
            Dns=local
          else
            Dns=$(echo ${DnsParams} | cut -d',' -f2)
          fi

          sap_sid=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query "Stacks[*].Parameters[?ParameterKey=='HANASID'].ParameterValue" --region {{global:REGION}} --output text)
          sid_upper=$(echo ${sap_sid} | tr '[[:lower:]]' '[[:upper:]]')
          DIRECTORY="/usr/sap/${sid_upper}"

          if [ ! -d "$DIRECTORY" ]; then
            echo "AMI does not have a directory ${DIRECTORY} that matched with sid ${sap_sid}..."
            exit 32
          fi
  - name: InstallJq
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 60
    nextStep: RunPreScripts
    isEnd: false
    onCancel: step:DeleteOnFailure
    onFailure: step:DeleteOnFailure
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ GetInstanceId.Output }}'
      Parameters:
        commands: |-
          #!/bin/bash

          # Error handling
          set -eu
          trap 'ReturnCode=$?; echo >&2 "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $ReturnCode' ERR

          source /etc/os-release
          if [[ ${ID} == "sles" ]]; then
            ZYPP_LOCK_TIMEOUT=180 zypper install -y jq
          else
            yum install -y jq
          fi
  - description: Run Pre Scripts
    name: RunPreScripts
    action: aws:runCommand
    maxAttempts: 1
    timeoutSeconds: '2700'
    nextStep: CleanupOldInstallation
    isCritical: false
    isEnd: false
    onCancel: step:DeleteOnFailure
    onFailure: step:DeleteOnFailure
    inputs:
      InstanceIds:
        - '{{ GetInstanceId.Output }}'
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash

          # Create temp working directory
          mkdir -p /root/install/add-hana-worker/{{ SetActionId.Output }}
          WORKDIR=/root/install/add-hana-worker/{{ SetActionId.Output }}

          # declare
          scripts='{{ GetConfigurationScripts.Output }}'
          for row in $(echo ${scripts} | jq -r '.preConfigurationScripts.configurationScripts' | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }
            s3_path=$(_jq '.s3URL')
            s3_filename=$(basename ${s3_path})
            local_file_path=${WORKDIR}/${s3_filename}
            aws s3 cp ${s3_path} ${local_file_path}
            bash ${local_file_path} > ${local_file_path}.log 2>&1

            if [[ $? -ne 0 ]]; then
              if [[ $(echo ${scripts} | jq -r '.preConfigurationScripts.onFailureBehaviour') != "CONTINUE" ]]; then
                exit 1
              fi
            fi
          done
  - description: Adjust file systems accordingly
    name: CleanupOldInstallation
    action: aws:runCommand
    maxAttempts: 1
    timeoutSeconds: '2700'
    nextStep: AddHanaWorkerNode
    isEnd: false
    onCancel: step:DeleteOnFailure
    onFailure: step:DeleteOnFailure
    inputs:
      InstanceIds:
        - '{{ GetInstanceId.Output }}'
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash

          # Create temp working directory
          # mkdir -p /root/install/add-hana-worker/{{ SetActionId.Output }}
          WORKDIR=/root/install/add-hana-worker/{{ SetActionId.Output }}
          hana_sid=$(aws cloudformation describe-stacks --stack-name  {{ GetParentDeploymentName.Output }} --query "Stacks[*].Parameters[?ParameterKey=='HANASID'].ParameterValue" --region {{global:REGION}} --output text | tr -d '\n')
          is_fsx=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query "Stacks[*].Parameters[?ParameterKey=='VolumeTypeHanaData'].ParameterValue" --region {{global:REGION}} --output text| tr -d '\n')
          sid_upper=$(echo ${hana_sid} | tr '[[:lower:]]' '[[:upper:]]')
          sid_lower=$(echo ${hana_sid} | tr '[[:upper:]]' '[[:lower:]]')
          usrsap="/usr/sap/${sid_upper}"
          HanaWorkerHostname={{ HanaDbWorkerHostname }}

          # Error handling
          set -eu
          trap 'errorout \$?' ERR

          errorout() {
            echo "exiting with $?..."
          }

          is_mounted() {
              findmnt "$1" > /dev/null
          }

          is_empty() {
              if [ -z '$(ls -A "$1")' ]; then
                  exit 0
              else
                  exit 1
              fi
          }
          sudo ps -ef | grep '/usr/sap' | grep -v grep | awk '{print "kill -9 "$2}' | sh || true

          # run only if volume type is fsx
          if [[ ${is_fsx} == "fsx" ]]; then
              until ! is_mounted ${usrsap}
              do
                  umount ${usrsap}
              done
              fstab_entry=($(grep " ${usrsap} " /etc/fstab))
              dns=$(grep -i " ${usrsap} " /etc/fstab | cut -d ' ' -f1 | cut -d '/' -f1,2)
              sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${dns} /tmp
              mkdir /tmp/usr-sap-${HanaWorkerHostname}

              until ! is_mounted "/tmp"
              do
                  umount /tmp
              done

              # clean up /usr/sap directory and then create directory with DB_SID
              rm -rf /usr/sap/*
              mkdir -p ${usrsap}
              chmod 777 ${usrsap}

              # delete the /usr/sap entry in fstab and create a new one
              sed -i "/ \/usr\/sap\/${sid_upper} /d" /etc/fstab
              echo "${dns}/usr-sap-${HanaWorkerHostname} ${fstab_entry[@]:1}" >> /etc/fstab

              until is_mounted ${usrsap}
              do
                  mount ${usrsap}
              done

              mount_number=`printf "%05d" $(echo {{ GetFsxInformation.Output }} | cut -d',' -f2)`
              hanadata="/hana/data/${sid_upper}/mnt${mount_number}"
              hanalog="/hana/log/${sid_upper}/mnt${mount_number}"
              mkdir -p ${hanadata} ${hanalog}
              chmod -R 777 ${hanadata} ${hanalog}
              chown -R ${sid_lower}adm:sapsys ${hanadata} ${hanalog}

              datadns=$(echo {{GetOntapSvmsDns.Output}} | cut -d',' -f1)
              logdns=$(echo {{GetOntapSvmsDns.Output}} | cut -d',' -f2)

              data_fstab_entry="${datadns}:/${sid_upper}_data_mnt${mount_number} ${hanadata} ${fstab_entry[@]:2}"
              log_fstab_entry="${logdns}:/${sid_upper}_log_mnt${mount_number} ${hanalog} ${fstab_entry[@]:2}"

              echo ${data_fstab_entry} >> /etc/fstab
              echo ${log_fstab_entry} >> /etc/fstab
              echo -n "${data_fstab_entry}_LaunchWizard_${log_fstab_entry}"

              until is_mounted ${hanadata}
              do
                  mount ${hanadata}
              done

              until is_mounted ${hanalog}
              do
                  mount ${hanalog}
              done    
              chmod -R 777 ${hanadata} ${hanalog}
              chown -R ${sid_lower}adm:sapsys ${hanadata} ${hanalog}
          else
              rm -rf /usr/sap/*
              rm -rf /hana/data/${sid_upper}/*
              rm -rf /hana/log/${sid_upper}/*
              mkdir -p ${usrsap}
              chmod 777 ${usrsap}
          fi
  - description: Adjust file systems accordingly
    name: AddHanaWorkerNode
    action: aws:runCommand
    maxAttempts: 1
    timeoutSeconds: '2700'
    nextStep: RunPostScripts
    isEnd: false
    onCancel: step:DeleteOnFailure
    onFailure: step:DeleteOnFailure
    inputs:
      InstanceIds:
        - '{{ GetInstanceId.Output }}'
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash
          # Create temp working directory
          # mkdir -p /root/install/add-hana-standby/{{ SetActionId.Output }}
          WORKDIR=/root/install/add-hana-worker/{{ SetActionId.Output }}

          hana_sid=$(aws cloudformation describe-stacks --stack-name  {{ GetParentDeploymentName.Output }} --query "Stacks[*].Parameters[?ParameterKey=='HANASID'].ParameterValue" --region {{global:REGION}} --output text | tr -d '\n')

          # Error handling       
          set -eu                
          trap 'errorout \$?' ERR

          errorout() {           
            rm -f /hana/shared/password.xml
            echo "exiting with $?..."
          }                       

          cd /hana/shared/${hana_sid}/global/hdb/saphostagent_setup/                   
          /hana/shared/${hana_sid}/global/hdb/saphostagent_setup/saphostexec -install

          hana_password=$(aws secretsmanager get-secret-value --secret-id {{ HanaDbPasswordSecretKey }} --region {{global:REGION}} | jq -r '.SecretString' | cut -d "\"" -f2 | tr -d '\n') 

          mkfifo /hana/shared/password.xml
          echo -e "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Passwords>\n<password><"'!'"[CDATA[${hana_password}]]></password>\n<sapadm_password><"'!'"[CDATA[${hana_password}]]></sapadm_password>\n<system_user_password><"'!'"[CDATA[${hana_password}]]></system_user_password>\n<root_password><"'!'"[CDATA[${hana_password}]]></root_password>\n</Passwords>\n" > /hana/shared/password.xml &
          cat /hana/shared/password.xml | /hana/shared/${hana_sid}/hdblcm/hdblcm --action=add_hosts --addhosts={{ HanaDbWorkerHostname }}:role=worker --sid=${hana_sid} --read_password_from_stdin=xml --batch  
          rm -f /hana/shared/password.xml
  - description: Run Post Scripts
    name: RunPostScripts
    action: aws:runCommand
    maxAttempts: 1
    timeoutSeconds: '2700'
    isCritical: false
    isEnd: true
    onCancel: step:DeleteOnFailure
    onFailure: step:DeleteOnFailure
    inputs:
      InstanceIds:
        - '{{ GetInstanceId.Output }}'
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash

          # Create temp working directory
          mkdir -p /root/install/add-hana-worker/{{ SetActionId.Output }}
          WORKDIR=/root/install/add-hana-worker/{{ SetActionId.Output }}

          scripts='{{ GetConfigurationScripts.Output }}'
          for row in $(echo ${scripts} | jq -r '.postConfigurationScripts.configurationScripts' | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }
            s3_path=$(_jq '.s3URL')
            s3_filename=$(basename ${s3_path})
            local_file_path=${WORKDIR}/${s3_filename}
            aws s3 cp ${s3_path} ${local_file_path}
            bash ${local_file_path} > ${local_file_path}.log 2>&1

            if [[ $? -ne 0 ]]; then
              if [[ $(echo ${scripts} | jq -r '.postConfigurationScripts.onFailureBehaviour') != "CONTINUE" ]]; then
                exit 1
              fi
            fi
          done
  - name: DeleteOnFailure
    action: aws:branch
    isEnd: true
    inputs:
      Choices:
        - NextStep: DeleteHANAWorkerNodeStack
          Variable: '{{ DisableDeploymentRollback }}'
          StringEquals: 'False'
  - description: Delete HANA worker node CFN stack
    name: DeleteHANAWorkerNodeStack
    action: aws:deleteStack
    isEnd: true
    inputs:
      StackName: '{{ CreateCfnStackName.Output }}'