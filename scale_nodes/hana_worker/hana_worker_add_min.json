{"schemaVersion":"0.3","description":"Add a HANA worker node","parameters":{"HanaPrimaryInstanceId":{"allowedPattern":"^i-[a-z0-9]{17}$","default":"i-abcdefg1234567890","description":"(Required) Instance ID of the primary HANA node.","type":"String"},"HanaDbWorkerHostname":{"allowedPattern":"^[a-z0-9-]+$","default":"examplenode02","description":"(Required) Hostname of the new HANA subordinate node.","maxChars":13,"type":"String"},"HanaDbPasswordSecretKey":{"allowedPattern":"^[\\w/_+=.@-]{0,512}$","default":"LaunchWizard-ExampleSecret-GlobalPassword","description":"(Required) Name of the secret used for storing the HANA password.","maxChars":512,"type":"String"},"HanaDbAmiId":{"allowedPattern":"^ami-([a-z0-9]{8}|[a-z0-9]{17})$","default":"ami-00000000000000000","description":"(Required) AMI to be used for the new DB node. Typically, this will be latest copy of existing DB worker node.","type":"String"},"HanaDbSecurityGroup":{"allowedPattern":"^(?:sg-[a-z0-9]{8}|sg-[a-z0-9]{17})?$","default":"","description":"(Optional) Security Group to be used for the new HANA node. If left blank, the security group will be inferred from parent deployment.","type":"String"},"Ec2KeyPair":{"allowedPattern":"^[\\x00-\\x7F]{0,255}$","default":"","description":"(Optional) Key pair to be used for the new HANA node. If left blank, the key pair will be inferred from parent deployment.","maxChars":255,"type":"String"},"PrivateIp":{"allowedPattern":"(^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$|^$)","default":"","description":"(Optional) Private IP address to use. If left blank, a private IP address will be automatically assigned from the subnets available pool.","type":"String"},"DisableDeploymentRollback":{"allowedValues":["True","False"],"default":"True","description":"Disable rollback on failure.","type":"String"},"ScriptFailureBehavior":{"allowedValues":["CONTINUE","ROLLBACK"],"default":"ROLLBACK","description":"Action to take if any issues are encountering during pre/post script setup.","type":"String"},"PreDeploymentScript":{"allowedPattern":"^(s3://[a-z0-9\\-\\.\\/]+)?$","default":"","description":"(Optional) Full s3 URI path of pre-deployment script. Example format: s3://example-bucket-name/script.sh","type":"String"},"PostDeploymentScript":{"allowedPattern":"^(s3://[a-z0-9\\-\\.\\/]+)?$","default":"","description":"(Optional) Full s3 URI path of post-deployment script. Example format: s3://example-bucket-name/script.sh","type":"String"}},"mainSteps":[{"name":"GetParentDeploymentName","action":"aws:runCommand","nextStep":"GetDeploymentId","isEnd":false,"inputs":{"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\nparentDeploymentName=$(aws ec2 describe-instances --instance-ids {{ HanaPrimaryInstanceId }} --query 'Reservations[*].Instances[*].Tags[?Key==`aws:cloudformation:stack-name`].Value' --region {{global:REGION}} --output text)\n\nif [ -z \"$parentDeploymentName\" ]; then\n echo \"Failed to get parent deployment ID.\"\n exit 1\nfi\n\necho -n $parentDeploymentName"},"InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"GetDeploymentId","action":"aws:runCommand","nextStep":"GetDeploymentSpecifications","isEnd":false,"inputs":{"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\nparentDeploymentName={{ GetParentDeploymentName.Output }}\nappName=\"${parentDeploymentName#LaunchWizard-}\"\n\n# Initialize variables\ndeploymentList=()\nnext_token=\"\"\n\n# Loop through all pages\nwhile true; do\n # Call the AWS CLI command and store the output in a variable\n if [ -z \"$next_token\" ]; then\n output=$(aws launch-wizard list-deployments --max-items 100 --page-size 100)\n else\n output=$(aws launch-wizard list-deployments --max-items 100 --page-size 100 --starting-token \"$next_token\")\n fi\n\n # Extract the deployments list from the output\n deployments=$(echo \"$output\" | jq -r '.deployments')\n\n # Append the deployments to the list variable\n deploymentList+=(\"$deployments\")\n\n # Check if there is a next token in the response\n next_token=$(echo \"$output\" | jq -r '.NextToken')\n\n # If there is no next token, exit the loop\n if [ -z \"$next_token\" ] || [ \"$next_token\" == \"null\" ]; then\n break\n fi\ndone\n\n# Filter the list for the object with specified application name\napplicationObject=$(echo \"${deploymentList[@]}\" | jq --arg appName \"$appName\" -r '.[] | select(.name == $appName)')\n\nif [ -z \"$applicationObject\" ]; then\n echo \"No deployment with name ${appName} found.\"\n exit 1\nelse\n deploymentId=$(echo \"$applicationObject\" | jq -r '.id')\nfi\n\nif [ -z \"$deploymentId\" ]; then\n echo \"Failed to identify deployment ID for ${appName}.\"\n exit 1\nfi\n\necho -n $deploymentId"},"InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"GetDeploymentSpecifications","action":"aws:executeAwsApi","nextStep":"CreateCfnStackName","isEnd":false,"inputs":{"Service":"launch-wizard","Api":"GetDeployment","deploymentId":"{{ GetDeploymentId.Output }}"},"outputs":[{"Name":"deploymentName","Selector":"$.deployment.name","Type":"String"},{"Name":"DatabaseSecurityGroupId","Selector":"$.deployment.specifications.DatabaseSecurityGroupId","Type":"String"},{"Name":"KeyPairName","Selector":"$.deployment.specifications.KeyPairName","Type":"String"}]},{"name":"CreateCfnStackName","action":"aws:runCommand","nextStep":"SetActionId","isEnd":false,"inputs":{"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\n## Set CFN stack name for execution\ncfnStackName={{ GetParentDeploymentName.Output }}-{{ HanaDbWorkerHostname }}\n\necho -n $cfnStackName"},"InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"SetActionId","action":"aws:runCommand","nextStep":"GetKeyPairName","isEnd":false,"inputs":{"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n\n## Set ActionId.\naddActionIdPrefix='A'\ngeneratedUuid=$(uuidgen)\n\n# Ex. A-7e8ab1dc-39fe-4979-8243-2ad2bc507b3a\nactionId=$addActionIdPrefix-$generatedUuid\n\necho -n $actionId"},"InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"GetKeyPairName","action":"aws:runCommand","nextStep":"GetDbSecurityGroup","isEnd":false,"inputs":{"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\nec2KeyPair={{ Ec2KeyPair }}\n\n## If EC2 Key Pair name was not provided, attempt to identify from deployment specifications\nif [ ! -n \"$ec2KeyPair\" ]; then\n ec2KeyPair={{ GetDeploymentSpecifications.KeyPairName }}\nfi\n\necho -n $ec2KeyPair"},"InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"GetDbSecurityGroup","action":"aws:runCommand","nextStep":"GetConfigurationScripts","isEnd":false,"inputs":{"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\nhanaDbSecurityGroup={{ HanaDbSecurityGroup }}\nparentDeploymentName={{ GetParentDeploymentName.Output }}\n\n## If DB Security Group ID was not provided, attempt to identify from deployment specifications\n#if [ ! -n \"$hanaDbSecurityGroup\" ]; then\n# ## Check whether an existing SG was utilized or if a new one was created\n# if [ -v \"{{ GetDeploymentSpecifications.DatabaseSecurityGroupId }}\" ]; then\n# hanaDbSecurityGroup={{ GetDeploymentSpecifications.DatabaseSecurityGroupId }}\n# else\n# hanaDbSecurityGroup=$(aws cloudformation describe-stack-resources --stack-name ${parentDeploymentName} --logical-resource-id NewDBSecurityGroup --query 'StackResources[0].PhysicalResourceId' --region {{global:REGION}} --output text)\n# fi\n#fi\n\n# MT: If Security Group ID was not provided, attempt to identify from source instance\nif [ ! -n \"$hanaDbSecurityGroup\" ]; then\n #Determine IMDSv1 or IMDSv2\n METADATA_RESPONSE=$(curl --write-out '%{http_code}' --silent --output /dev/null http://169.254.169.254/latest/meta-data/)\n HEADER=\"\"\n if [ $METADATA_RESPONSE -ne 200 ]; then\n echo -n \"Use IMDSv2!\"\n TOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\n HEADER=\"X-aws-ec2-metadata-token: $TOKEN\"\n fi\n\n mac=$(curl --header \"$HEADER\" --silent http://169.254.169.254/latest/meta-data/mac)\n hanaDbSecurityGroup=$(curl --header \"$HEADER\" --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/${mac}/security-group-ids)\nfi\n\nif [ -z \"$hanaDbSecurityGroup\" ]; then\n echo \"Unable to identify security group ID.\"\n exit 1\nfi\n\necho -n $hanaDbSecurityGroup | sed -e \"s/ /,/g\" "},"InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"GetConfigurationScripts","action":"aws:runCommand","nextStep":"DiscoverAndChecks","isEnd":false,"inputs":{"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\n## Set initial variable values from automation inputs\npreDeploymentScript={{ PreDeploymentScript }}\npostDeploymentScript={{ PostDeploymentScript }}\nscriptFailureBehavior={{ ScriptFailureBehavior }}\n\n## Set ConfigurationScripts based on input\nconfigurationScripts='{\n \"preConfigurationScripts\": {\n \"configurationScripts\": [],\n \"onFailureBehaviour\": \"'$scriptFailureBehavior'\",\n \"timeoutInMinutes\": 0\n },\n \"postConfigurationScripts\": {\n \"configurationScripts\": [],\n \"onFailureBehaviour\": \"'$scriptFailureBehavior'\",\n \"timeoutInMinutes\": 0\n }\n}'\n\n## Update configurationScripts if s3 URI was passed for pre-deployment scripts.\nif [[ -n \"$preDeploymentScript\" ]]; then\n configurationScripts=$(echo $configurationScripts | jq --arg key \"sequence\" '.preConfigurationScripts.configurationScripts[0][$key] = 0')\n configurationScripts=$(echo $configurationScripts | jq --arg key \"s3URL\" --arg value $preDeploymentScript '.preConfigurationScripts.configurationScripts[0][$key] = $value')\n configurationScripts=$(echo $configurationScripts | jq --arg key \"nodeTypesToRunScriptFor\" '.preConfigurationScripts.configurationScripts[0][$key] = [\"DB\"]')\nfi\n\n## Update configurationScripts if s3 URI was passed for post-deployment scripts.\nif [[ -n \"$postDeploymentScript\" ]]; then\n configurationScripts=$(echo $configurationScripts | jq --arg key \"sequence\" '.postConfigurationScripts.configurationScripts[0][$key] = 0')\n configurationScripts=$(echo $configurationScripts | jq --arg key \"s3URL\" --arg value $postDeploymentScript '.postConfigurationScripts.configurationScripts[0][$key] = $value')\n configurationScripts=$(echo $configurationScripts | jq --arg key \"nodeTypesToRunScriptFor\" '.postConfigurationScripts.configurationScripts[0][$key] = [\"DB\"]')\nfi\n\necho -n $configurationScripts"},"InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"DiscoverAndChecks","action":"aws:runCommand","maxAttempts":1,"timeoutSeconds":600,"nextStep":"GetInstanceProfile","isEnd":false,"inputs":{"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\n# declare\ncheckDbSecurityGroup=true\nPrivateIp={{ PrivateIp }}\nparentDeploymentName={{ GetParentDeploymentName.Output }}\nHanaWorkerHostname={{ HanaDbWorkerHostname }}\nHanaDbSecurityGroup={{ GetDbSecurityGroup.Output }}\n\n# Create temp working directory\nmkdir -p /root/install/add-hana-worker/{{ SetActionId.Output }}\nWORKDIR=/root/install/add-hana-worker/{{ SetActionId.Output }}\n\n# check if hana install is set to true\nis_hana_installed_in_parent=$(aws cloudformation describe-stacks --stack-name ${parentDeploymentName} --query \"Stacks[*].Parameters[?ParameterKey=='InstallHANA'].ParameterValue\" --region {{global:REGION}} --output text)\n\nif [[ ${is_hana_installed_in_parent} == \"No\" ]]; then\n echo \"Adding nodes is only possible if sap application is installed in the parent deployment...HANA Installed=....${is_hana_installed_in_parent}...\"\n exit 8\nfi\n\n# derive from parent CFN stack\ndb_inst_num=$(aws cloudformation describe-stacks --stack-name ${parentDeploymentName} --query \"Stacks[*].Parameters[?ParameterKey=='SAPInstanceNum'].ParameterValue\" --region {{global:REGION}} --output text)\ndb_master_hostname=$(aws cloudformation describe-stacks --stack-name ${parentDeploymentName} --query \"Stacks[*].Parameters[?ParameterKey=='HANAHostname'].ParameterValue\" --region {{global:REGION}} --output text)\n\nif [[ -f \"/usr/sap/hostctrl/exe/sapcontrol\" ]]; then\n /usr/sap/hostctrl/exe/sapcontrol -nr ${db_inst_num} -host ${db_master_hostname} -function GetSystemInstanceList | egrep 'GREEN|GRAY' | cut -d, -f1,2,6,7 --output-delimiter=' ' >> ${WORKDIR}/SapcontrolSystemList.txt\nelse \n echo \"/usr/sap/hostctrl/exe/sapcontrol not found...exiting\"\n exit 1\nfi\n\nwhile read -r line; do\n SapControlArray=($line)\n SapControlArray[4]=$(ping -c 1 ${SapControlArray[0]} | grep data | cut -d\"(\" -f2 | cut -d\")\" -f1)\n\n # if instance not reachable\n if [[ -z ${SapControlArray[4]} ]]; then\n echo \"instance ${SapControlArray[0]} is not reachable via ping or instance not running...exiting...\"\n exit 2\n fi\n\n SapControlArray[5]=$(aws ec2 describe-instances --filter Name=private-ip-address,Values=${SapControlArray[4]} --query 'Reservations[].Instances[].InstanceId' --region {{global:REGION}} --output text)\n SapControlArray[6]=$(aws ec2 describe-instances --filter Name=private-ip-address,Values=${SapControlArray[4]} --query 'Reservations[].Instances[].InstanceType' --region {{global:REGION}} --output text)\n SapControlArray[7]=$(aws ec2 describe-instances --filter Name=private-ip-address,Values=${SapControlArray[4]} --query 'Reservations[].Instances[].SecurityGroups[].GroupId' --region {{global:REGION}} --output text)\n echo ${SapControlArray[*]} >> ${WORKDIR}/SapSystemList.txt\n\n # check if application is not running on any instance\n if [[ ${SapControlArray[3]} == \"GRAY\" ]]; then\n echo \"Database on instance ${SapControlArray[0]} is not running...exiting...\"\n exit 4\n fi\n\n # check if hostname is same as the new instance that is getting spun up\n if [[ ${SapControlArray[0]} == ${HanaWorkerHostname} ]]; then\n echo \"instance exists with the same hostname ${HanaWorkerHostname}...exiting...\"\n exit 5\n fi\n\n # check if ip is same as the new instance that is getting spun up\n if [[ ! -z ${PrivateIp} ]]; then\n if [[ ${SapControlArray[4]} == ${PrivateIp} ]]; then\n echo \"instance exists with the same ip ${PrivateIp}...exiting...\"\n exit 7\n fi\n fi\n\n # check if security group provided is same as the one for exising db instance \n if [[ (${checkDbSecurityGroup}) && (${SapControlArray[2]} == \"HDB|HDB_WORKER\") ]]; then\n if [[ ! ${SapControlArray[7]} =~ ${HanaDbSecurityGroup} ]]; then\n echo \"Security group does not match with the security group of existing instance ${SapControlArray[0]}...exiting...\"\n exit 8\n fi\n fi\n TotalInstanceList+=\"${SapControlArray[5]} \"\ndone < ${WORKDIR}/SapcontrolSystemList.txt\nunset SapControlArray\necho ${TotalInstanceList}\n\n# check if password can be read\naws secretsmanager get-secret-value --secret-id {{ HanaDbPasswordSecretKey }} --region {{global:REGION}} > /dev/null"},"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"GetInstanceProfile","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":60,"nextStep":"GetSubnetId","isEnd":false,"inputs":{"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\naws ec2 describe-instances --filter Name=instance-id,Values={{ HanaPrimaryInstanceId }} --query 'Reservations[].Instances[].IamInstanceProfile.Arn' --region {{global:REGION}} --output text | cut -d \"/\" -f2 | tr -d '\\n'"},"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"GetSubnetId","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":60,"nextStep":"GetInstanceType","isEnd":false,"inputs":{"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\naws ec2 describe-instances --filter Name=instance-id,Values={{ HanaPrimaryInstanceId }} --query 'Reservations[].Instances[].SubnetId' --region {{global:REGION}} --output text | tr -d '\\n'"},"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"GetInstanceType","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":60,"nextStep":"GetDnsParameterList","isEnd":false,"inputs":{"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\naws ec2 describe-instances --filter Name=instance-id,Values={{ HanaPrimaryInstanceId }} --query 'Reservations[].Instances[].InstanceType' --region {{global:REGION}} --output text | tr -d '\\n'"},"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"GetDnsParameterList","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":60,"nextStep":"GetHanaDataVolumeType","isEnd":false,"inputs":{"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ HanaPrimaryInstanceId }}"],"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\n# Derive DNS Type from parent stack\nDNSParameterList=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query \"Stacks[*].Parameters[?ParameterKey=='DNSParameterList'].ParameterValue\" --region {{global:REGION}} --output text | tr -d '\\n')\n[[ -z \"$DNSParameterList\" ]] && DNSParameterList=local || DNSParameterList=${DNSParameterList}\necho -n ${DNSParameterList}"}}},{"name":"GetHanaDataVolumeType","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":60,"nextStep":"BranchIfFsxVolumeType","isEnd":false,"inputs":{"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ HanaPrimaryInstanceId }}"],"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\n# Derive HanaData Volume type from Parent Stack\nHanaDataVolumeType=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query \"Stacks[*].Parameters[?ParameterKey=='VolumeTypeHanaData'].ParameterValue\" --region {{global:REGION}} --output text | tr -d '\\n')\necho -n ${HanaDataVolumeType}"}}},{"name":"BranchIfFsxVolumeType","action":"aws:branch","inputs":{"Choices":[{"NextStep":"GetFsxInformation","Variable":"{{ GetHanaDataVolumeType.Output }}","StringEquals":"fsx"}],"Default":"CreateEc2Instance"}},{"name":"GetFsxInformation","action":"aws:runCommand","nextStep":"CreateEc2Instance","isEnd":false,"inputs":{"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ HanaPrimaryInstanceId }}"],"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\nfunction get_mount_number() {\n count=1\n mount_array=($(df -h | grep \" /hana/data/HDB/mnt\" | awk '{print $6}' | cut -d \"/\" -f5 | cut -c 4- | awk '{print $1 + 0}'))\n for i in ${mount_array[@]}\n do\n if [[ ${count} -ne ${i} ]]; then \n printf \"%05d\\n\" ${count}\n exit\n fi\n ((count++))\n done\n printf \"%05d\\n\" ${count}\n}\n\nmount_number=$(get_mount_number)\nIsServiceRole=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query \"Stacks[*].Parameters[?ParameterKey=='IsServiceRole'].ParameterValue\" --region {{global:REGION}} --output text | tr -d '\\n')\nHANAFsxTotalVolumeSize=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query \"Stacks[*].Parameters[?ParameterKey=='HANAFsxTotalVolumeSize'].ParameterValue\" --region {{global:REGION}} --output text | tr -d '\\n')\nHANAFsxDataVolumeSize=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query \"Stacks[*].Parameters[?ParameterKey=='HANAFsxDataVolumeSize'].ParameterValue\" --region {{global:REGION}} --output text | tr -d '\\n')\nHANAFsxLogVolumeSize=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query \"Stacks[*].Parameters[?ParameterKey=='HANAFsxLogVolumeSize'].ParameterValue\" --region {{global:REGION}} --output text | tr -d '\\n')\nHANASID=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query \"Stacks[*].Parameters[?ParameterKey=='HANASID'].ParameterValue\" --region {{global:REGION}} --output text| tr -d '\\n')\n\necho -n \"${IsServiceRole},${mount_number},${HANAFsxTotalVolumeSize},${HANAFsxDataVolumeSize},${HANAFsxLogVolumeSize},${HANASID}\""}}},{"name":"CreateEc2Instance","action":"aws:createStack","nextStep":"GetInstanceId","isEnd":false,"inputs":{"StackName":"{{ CreateCfnStackName.Output }}","TemplateBody":"{\n \"AWSTemplateFormatVersion\": \"2010-09-09\",\n \"Description\": \"Deploy a Single EC2 Instance\",\n \"Parameters\": {\n \"Ec2KeyPair\": {\n \"Type\": \"AWS::EC2::KeyPair::KeyName\",\n \"Default\": \"home\",\n \"Description\": \"Name of an existing Amazon EC2 key pair.\"\n },\n \"Ec2AmiId\": {\n \"Type\": \"String\",\n \"Description\": \"EC2 Linux AMI ID for HANA master and worker nodes.\"\n },\n \"Ec2InstanceType\": {\n \"Type\": \"String\",\n \"Description\": \"Instance type for SAP HANA host.\",\n \"Default\": \"r5.2xlarge\"\n },\n \"Ec2IAMProfile\": {\n \"Type\": \"String\",\n \"Description\": \"IAM profile\"\n },\n \"Ec2SecurityGroup\": {\n \"Type\": \"String\",\n \"Description\": \"SG\"\n },\n \"Ec2Subnet\": {\n \"Type\": \"String\",\n \"Description\": \"Subnet\"\n },\n \"Byoip\": {\n \"Type\": \"String\",\n \"Description\": \"Byoip\",\n \"Default\": \"\"\n },\n \"DNSParameterList\": {\n \"Type\": \"CommaDelimitedList\",\n \"Description\": \"Name to use for fully qualified domain names.\",\n \"Default\": \"\"\n },\n \"VolumeType\": {\n \"Type\": \"String\",\n \"Description\": \"Volume type\",\n \"Default\": \"\"\n },\n \"FsxParameters\": {\n \"Type\": \"CommaDelimitedList\",\n \"Description\": \"FSx parameters to be used\",\n \"Default\": \"\"\n },\n \"ParentDeploymentName\": {\n \"Type\": \"String\",\n \"Description\": \"Full name of the parent deployment.\",\n \"Default\": \"\"\n },\n \"HanaDbWorkerHostname\": {\n \"Type\": \"String\",\n \"Description\": \"Host name to use for SAP HANA worker node (DNS short name).\"\n }\n },\n \"Conditions\": {\n \"isByoip\": {\n \"Fn::Not\": [\n {\n \"Fn::Equals\": [\n \"\",\n {\n \"Ref\": \"Byoip\"\n }\n ]\n }\n ]\n },\n \"EnableRoute53\": {\n \"Fn::Equals\": [\n {\n \"Fn::Select\": [\n 0,\n {\n \"Ref\": \"DNSParameterList\"\n }\n ]\n },\n \"Route53\"\n ]\n },\n \"isFsx\": {\n \"Fn::Equals\": [\n {\n \"Ref\": \"VolumeType\"\n },\n \"fsx\"\n ]\n },\n \"ServiceRoleYes\": {\n \"Fn::And\": [\n {\n \"Fn::Equals\": [\n {\n \"Fn::Select\": [\n 0,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n },\n \"Yes\"\n ]\n },\n {\n \"Condition\": \"isFsx\"\n }\n ]\n },\n \"ServiceRoleNo\": {\n \"Fn::And\": [\n {\n \"Fn::Equals\": [\n {\n \"Fn::Select\": [\n 0,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n },\n \"No\"\n ]\n },\n {\n \"Condition\": \"isFsx\"\n }\n ]\n }\n },\n \"Mappings\": {\n \"AWSLaunchWizardTags\": {\n \"SourceTag\": {\n \"Key\": \"SourceTemplate\",\n \"Value\": \"AWSLaunchWizard\"\n },\n \"ApplicationTypeTag\": {\n \"Key\": \"LaunchWizardApplicationType\",\n \"SAPValue\": \"SAP\",\n \"SQLValue\": \"SQL_SERVER\",\n \"ADValue\": \"ACTIVE_DIRECTORY\",\n \"LINUXValue\": \"SQL_SERVER_LINUX\"\n }\n }\n },\n \"Resources\": {\n \"Ec2Instance\": {\n \"Type\": \"AWS::EC2::Instance\",\n \"Properties\": {\n \"Monitoring\": true,\n \"KeyName\": {\n \"Ref\": \"Ec2KeyPair\"\n },\n \"ImageId\": {\n \"Ref\": \"Ec2AmiId\"\n },\n \"IamInstanceProfile\": {\n \"Ref\": \"Ec2IAMProfile\"\n },\n \"UserData\": {\n \"Fn::Base64\": {\n \"Fn::Join\": [\n \"\",\n [\n \"#!/bin/bash -xv\\n\",\n \"systemctl restart amazon-ssm-agent\\n\"\n ]\n ]\n }\n },\n \"InstanceType\": {\n \"Ref\": \"Ec2InstanceType\"\n },\n \"SubnetId\": {\n \"Ref\": \"Ec2Subnet\"\n },\n \"PrivateIpAddress\": {\n \"Fn::If\": [\n \"isByoip\",\n {\n \"Ref\": \"Byoip\"\n },\n {\n \"Ref\": \"AWS::NoValue\"\n }\n ]\n },\n \"SecurityGroupIds\": [\n {\n \"Ref\": \"Ec2SecurityGroup\"\n }\n ],\n \"Tags\": [\n {\n \"Key\": \"Name\",\n \"Value\": {\n \"Fn::Join\": [\n \"-\",\n [\n {\n \"Ref\": \"ParentDeploymentName\"\n },\n \"HANA Database\",\n {\n \"Ref\": \"HanaDbWorkerHostname\"\n }\n ]\n ]\n }\n },\n {\n \"Key\": {\n \"Fn::FindInMap\": [\n \"AWSLaunchWizardTags\",\n \"SourceTag\",\n \"Key\"\n ]\n },\n \"Value\": {\n \"Fn::FindInMap\": [\n \"AWSLaunchWizardTags\",\n \"SourceTag\",\n \"Value\"\n ]\n }\n },\n {\n \"Key\": {\n \"Fn::FindInMap\": [\n \"AWSLaunchWizardTags\",\n \"ApplicationTypeTag\",\n \"Key\"\n ]\n },\n \"Value\": {\n \"Fn::FindInMap\": [\n \"AWSLaunchWizardTags\",\n \"ApplicationTypeTag\",\n \"SAPValue\"\n ]\n }\n }\n ]\n }\n },\n \"R53Record\": {\n \"Condition\": \"EnableRoute53\",\n \"Type\": \"AWS::Route53::RecordSet\",\n \"DependsOn\": \"Ec2Instance\",\n \"Properties\": {\n \"HostedZoneName\": {\n \"Fn::Select\": [\n 1,\n {\n \"Ref\": \"DNSParameterList\"\n }\n ]\n },\n \"Name\": {\n \"Fn::Join\": [\n \"\",\n [\n {\n \"Ref\": \"HanaDbWorkerHostname\"\n },\n \".\",\n {\n \"Fn::Select\": [\n 1,\n {\n \"Ref\": \"DNSParameterList\"\n }\n ]\n }\n ]\n ]\n },\n \"Type\": \"A\",\n \"TTL\": 60,\n \"ResourceRecords\": [\n {\n \"Fn::GetAtt\": [\n \"Ec2Instance\",\n \"PrivateIp\"\n ]\n }\n ]\n }\n },\n \"AutoRecoverAlarmMaster\": {\n \"Type\": \"AWS::CloudWatch::Alarm\",\n \"Properties\": {\n \"AlarmName\": {\n \"Fn::Join\": [\n \"-\",\n [\n {\n \"Ref\": \"AWS::StackName\"\n },\n \"AutoRecoverAlarmMaster\"\n ]\n ]\n },\n \"AlarmDescription\": \"Trigger a recovery when instance status check fails for 5 consecutive minute.\",\n \"Namespace\": \"AWS/EC2\",\n \"MetricName\": \"StatusCheckFailed_System\",\n \"Statistic\": \"Minimum\",\n \"Period\": 60,\n \"EvaluationPeriods\": 5,\n \"ComparisonOperator\": \"GreaterThanThreshold\",\n \"Threshold\": 0,\n \"AlarmActions\": [\n {\n \"Fn::Join\": [\n \"\",\n [\n \"arn:\",\n {\n \"Ref\": \"AWS::Partition\"\n },\n \":automate:\",\n {\n \"Ref\": \"AWS::Region\"\n },\n \":ec2:recover\"\n ]\n ]\n }\n ],\n \"Dimensions\": [\n {\n \"Name\": \"InstanceId\",\n \"Value\": {\n \"Ref\": \"Ec2Instance\"\n }\n }\n ]\n }\n },\n \"FsxAdmin\": {\n \"Type\": \"AWS::SecretsManager::Secret\",\n \"Properties\": {\n \"Description\": \"Admin password for ONTAP\",\n \"GenerateSecretString\": {\n \"ExcludeCharacters\": \"\\\"@/\\\\\",\n \"GenerateStringKey\": \"password\",\n \"PasswordLength\": 8,\n \"SecretStringTemplate\": \"{\\\"username\\\":\\\"fsxadmin\\\"}\"\n },\n \"Name\": {\n \"Fn::Join\": [\n \"-\",\n [\n {\n \"Ref\": \"AWS::StackName\"\n },\n \"fsxadmin\"\n ]\n ]\n }\n },\n \"Condition\": \"isFsx\"\n },\n \"FsxAdminSecretResourcePolicyServiceRole\": {\n \"Type\": \"AWS::SecretsManager::ResourcePolicy\",\n \"Properties\": {\n \"ResourcePolicy\": {\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Resource\": \"*\",\n \"Action\": [\n \"secretsmanager:GetSecretValue\",\n \"secretsmanager:CreateSecret\",\n \"secretsmanager:GetRandomPassword\"\n ],\n \"Effect\": \"Allow\",\n \"Principal\": {\n \"AWS\": {\n \"Fn::Sub\": \"arn:aws:iam::${AWS::AccountId}:role/service-role/AmazonEC2RoleForLaunchWizard\"\n }\n }\n }\n ]\n },\n \"SecretId\": {\n \"Ref\": \"FsxAdmin\"\n }\n },\n \"Condition\": \"ServiceRoleYes\"\n },\n \"FsxAdminSecretResourcePolicyCustomeRole\": {\n \"Type\": \"AWS::SecretsManager::ResourcePolicy\",\n \"Properties\": {\n \"ResourcePolicy\": {\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Resource\": \"*\",\n \"Action\": [\n \"secretsmanager:GetSecretValue\",\n \"secretsmanager:CreateSecret\",\n \"secretsmanager:GetRandomPassword\"\n ],\n \"Effect\": \"Allow\",\n \"Principal\": {\n \"AWS\": {\n \"Fn::Sub\": \"arn:aws:iam::${AWS::AccountId}:role/AmazonEC2RoleForLaunchWizard\"\n }\n }\n }\n ]\n },\n \"SecretId\": {\n \"Ref\": \"FsxAdmin\"\n }\n },\n \"Condition\": \"ServiceRoleNo\"\n },\n \"FsxOntapForHanaSecondary\": {\n \"Type\": \"AWS::FSx::FileSystem\",\n \"Properties\": {\n \"FileSystemType\": \"ONTAP\",\n \"SubnetIds\": [\n {\n \"Ref\": \"Ec2Subnet\"\n }\n ],\n \"OntapConfiguration\": {\n \"AutomaticBackupRetentionDays\": 0,\n \"DeploymentType\": \"SINGLE_AZ_1\",\n \"FsxAdminPassword\": {\n \"Fn::Join\": [\n \":\",\n [\n \"{{resolve:secretsmanager\",\n {\n \"Ref\": \"FsxAdmin\"\n },\n \"SecretString:password}}\"\n ]\n ]\n },\n \"ThroughputCapacity\": 1024\n },\n \"SecurityGroupIds\": [\n {\n \"Ref\": \"Ec2SecurityGroup\"\n }\n ],\n \"StorageCapacity\": {\n \"Fn::Select\": [\n 2,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n },\n \"StorageType\": \"SSD\",\n \"Tags\": [\n {\n \"Key\": \"Name\",\n \"Value\": {\n \"Fn::Join\": [\n \":\",\n [\n {\n \"Ref\": \"ParentDeploymentName\"\n },\n \"FsxOntapForHana\",\n {\n \"Ref\": \"HanaDbWorkerHostname\"\n }\n ]\n ]\n }\n },\n {\n \"Key\": {\n \"Fn::FindInMap\": [\n \"AWSLaunchWizardTags\",\n \"SourceTag\",\n \"Key\"\n ]\n },\n \"Value\": {\n \"Fn::FindInMap\": [\n \"AWSLaunchWizardTags\",\n \"SourceTag\",\n \"Value\"\n ]\n }\n },\n {\n \"Key\": {\n \"Fn::FindInMap\": [\n \"AWSLaunchWizardTags\",\n \"ApplicationTypeTag\",\n \"Key\"\n ]\n },\n \"Value\": {\n \"Fn::FindInMap\": [\n \"AWSLaunchWizardTags\",\n \"ApplicationTypeTag\",\n \"SAPValue\"\n ]\n }\n }\n ]\n },\n \"UpdateReplacePolicy\": \"Delete\",\n \"DeletionPolicy\": \"Delete\",\n \"Condition\": \"isFsx\"\n },\n \"HanaDataStorageVirtualMachineSecondary\": {\n \"Type\": \"AWS::FSx::StorageVirtualMachine\",\n \"Properties\": {\n \"FileSystemId\": {\n \"Ref\": \"FsxOntapForHanaSecondary\"\n },\n \"Name\": {\n \"Fn::Join\": [\n \"-\",\n [\n \"HanaDataSVMSecondary\",\n {\n \"Ref\": \"HanaDbWorkerHostname\"\n }\n ]\n ]\n },\n \"RootVolumeSecurityStyle\": \"UNIX\",\n \"SvmAdminPassword\": {\n \"Fn::Join\": [\n \":\",\n [\n \"{{resolve:secretsmanager\",\n {\n \"Ref\": \"FsxAdmin\"\n },\n \"SecretString:password}}\"\n ]\n ]\n }\n },\n \"UpdateReplacePolicy\": \"Delete\",\n \"DeletionPolicy\": \"Delete\",\n \"Condition\": \"isFsx\"\n },\n \"HanaDataVolumeSecondary\": {\n \"Type\": \"AWS::FSx::Volume\",\n \"Properties\": {\n \"Name\": {\n \"Fn::Join\": [\n \"\",\n [\n {\n \"Fn::Select\": [\n 5,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n },\n \"_data_mnt\",\n {\n \"Fn::Select\": [\n 1,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n }\n ]\n ]\n },\n \"OntapConfiguration\": {\n \"JunctionPath\": {\n \"Fn::Join\": [\n \"\",\n [\n \"/\",\n {\n \"Fn::Select\": [\n 5,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n },\n \"_data_mnt\",\n {\n \"Fn::Select\": [\n 1,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n }\n ]\n ]\n },\n \"SizeInMegabytes\": {\n \"Fn::Select\": [\n 3,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n },\n \"StorageEfficiencyEnabled\": \"false\",\n \"StorageVirtualMachineId\": {\n \"Ref\": \"HanaDataStorageVirtualMachineSecondary\"\n }\n },\n \"VolumeType\": \"ONTAP\"\n },\n \"UpdateReplacePolicy\": \"Delete\",\n \"DeletionPolicy\": \"Delete\",\n \"Condition\": \"isFsx\"\n },\n \"HanaLogStorageVirtualMachineSecondary\": {\n \"Type\": \"AWS::FSx::StorageVirtualMachine\",\n \"Properties\": {\n \"FileSystemId\": {\n \"Ref\": \"FsxOntapForHanaSecondary\"\n },\n \"Name\": {\n \"Fn::Join\": [\n \"-\",\n [\n \"HanaLogSVMSecondary\",\n {\n \"Ref\": \"HanaDbWorkerHostname\"\n }\n ]\n ]\n },\n \"RootVolumeSecurityStyle\": \"UNIX\",\n \"SvmAdminPassword\": {\n \"Fn::Join\": [\n \":\",\n [\n \"{{resolve:secretsmanager\",\n {\n \"Ref\": \"FsxAdmin\"\n },\n \"SecretString:password}}\"\n ]\n ]\n }\n },\n \"UpdateReplacePolicy\": \"Delete\",\n \"DeletionPolicy\": \"Delete\",\n \"Condition\": \"isFsx\"\n },\n \"HanaLogVolumeSecondary\": {\n \"Type\": \"AWS::FSx::Volume\",\n \"Properties\": {\n \"Name\": {\n \"Fn::Join\": [\n \"\",\n [\n {\n \"Fn::Select\": [\n 5,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n },\n \"_log_mnt\",\n {\n \"Fn::Select\": [\n 1,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n }\n ]\n ]\n },\n \"OntapConfiguration\": {\n \"JunctionPath\": {\n \"Fn::Join\": [\n \"\",\n [\n \"/\",\n {\n \"Fn::Select\": [\n 5,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n },\n \"_log_mnt\",\n {\n \"Fn::Select\": [\n 1,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n }\n ]\n ]\n },\n \"SizeInMegabytes\": {\n \"Fn::Select\": [\n 4,\n {\n \"Ref\": \"FsxParameters\"\n }\n ]\n },\n \"StorageEfficiencyEnabled\": \"false\",\n \"StorageVirtualMachineId\": {\n \"Ref\": \"HanaLogStorageVirtualMachineSecondary\"\n }\n },\n \"VolumeType\": \"ONTAP\"\n },\n \"UpdateReplacePolicy\": \"Delete\",\n \"DeletionPolicy\": \"Delete\",\n \"Condition\": \"isFsx\"\n }\n }\n}","DisableRollback":true,"TimeoutInMinutes":60,"Parameters":[{"ParameterKey":"Ec2KeyPair","ParameterValue":"{{ GetKeyPairName.Output }}"},{"ParameterKey":"Ec2AmiId","ParameterValue":"{{ HanaDbAmiId }}"},{"ParameterKey":"Ec2InstanceType","ParameterValue":"{{ GetInstanceType.Output }}"},{"ParameterKey":"Ec2IAMProfile","ParameterValue":"{{ GetInstanceProfile.Output }}"},{"ParameterKey":"Ec2SecurityGroup","ParameterValue":"{{ GetDbSecurityGroup.Output }}"},{"ParameterKey":"Ec2Subnet","ParameterValue":"{{ GetSubnetId.Output }}"},{"ParameterKey":"Byoip","ParameterValue":"{{ PrivateIp }}"},{"ParameterKey":"DNSParameterList","ParameterValue":"{{ GetDnsParameterList.Output }}"},{"ParameterKey":"VolumeType","ParameterValue":"{{ GetHanaDataVolumeType.Output }}"},{"ParameterKey":"FsxParameters","ParameterValue":"{{ GetFsxInformation.Output }}"},{"ParameterKey":"ParentDeploymentName","ParameterValue":"{{ GetParentDeploymentName.Output }}"},{"ParameterKey":"HanaDbWorkerHostname","ParameterValue":"{{ HanaDbWorkerHostname }}"}]}},{"name":"GetInstanceId","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":60,"nextStep":"GetInstanceIp","isEnd":false,"onCancel":"step:DeleteOnFailure","onFailure":"step:DeleteOnFailure","inputs":{"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\naws cloudformation describe-stack-resources --stack-name {{ CreateCfnStackName.Output }} --query 'StackResources[?ResourceType==`AWS::EC2::Instance`].PhysicalResourceId' --region {{global:REGION}} --output text | tr -d '\\n'"},"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ HanaPrimaryInstanceId }}"]}},{"name":"GetInstanceIp","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":180,"nextStep":"BranchIfFsxVolumeType1","isEnd":false,"onCancel":"step:DeleteOnFailure","onFailure":"step:DeleteOnFailure","inputs":{"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ GetInstanceId.Output }}"],"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\nhostnamectl set-hostname --static {{ HanaDbWorkerHostname }}\n_ip=$(ip -4 addr show eth0 | grep -oP '(?<=inet\\s)\\d+(\\.\\d+){3}' | tr -d '\\n')\necho -n ${_ip}"}}},{"name":"BranchIfFsxVolumeType1","action":"aws:branch","inputs":{"Choices":[{"NextStep":"GetOntapSvmsDns","Variable":"{{ GetHanaDataVolumeType.Output }}","StringEquals":"fsx"}],"Default":"UpdateEtcHostsOnMaster"}},{"name":"GetOntapSvmsDns","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":60,"nextStep":"UpdateEtcHostsOnMaster","isEnd":false,"onCancel":"step:DeleteOnFailure","onFailure":"step:DeleteOnFailure","inputs":{"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\ndatasvm=$(aws cloudformation describe-stack-resources --stack-name {{ CreateCfnStackName.Output }} --logical-resource-id HanaDataStorageVirtualMachineSecondary --region {{global:REGION}} | grep PhysicalResourceId | cut -d':' -f2 | cut -d\"\\\"\" -f2 | tr -d '\\n')\ndataDns=$(aws fsx describe-storage-virtual-machines --storage-virtual-machine-ids ${datasvm} --query 'StorageVirtualMachines[].Endpoints[].Nfs[].DNSName' --region {{global:REGION}} --output text | tr -d '\\n')\nlogsvm=$(aws cloudformation describe-stack-resources --stack-name {{ CreateCfnStackName.Output }} --logical-resource-id HanaLogStorageVirtualMachineSecondary --region {{global:REGION}} | grep PhysicalResourceId | cut -d':' -f2 | cut -d\"\\\"\" -f2 | tr -d '\\n')\nlogDns=$(aws fsx describe-storage-virtual-machines --storage-virtual-machine-ids ${logsvm} --query 'StorageVirtualMachines[].Endpoints[].Nfs[].DNSName' --region {{global:REGION}} --output text | tr -d '\\n')\n\necho -n \"${dataDns},${logDns}\""},"InstanceIds":["{{ GetInstanceId.Output }}"]}},{"name":"UpdateEtcHostsOnMaster","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":60,"nextStep":"SyncEtcHostsFromMaster","isEnd":false,"onCancel":"step:DeleteOnFailure","onFailure":"step:DeleteOnFailure","inputs":{"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ HanaPrimaryInstanceId }}"],"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\nDnsParams={{ GetDnsParameterList.Output }}\n\nif [[ ${DnsParams} == \"local\" ]]; then\n Dns=local\nelse\n Dns=$(echo ${DnsParams} | cut -d',' -f2)\nfi\n\necho \"{{GetInstanceIp.Output}} {{ HanaDbWorkerHostname }}.${Dns} {{ HanaDbWorkerHostname }}\" >> /etc/hosts\ncp /etc/hosts /hana/shared/hosts"}}},{"name":"SyncEtcHostsFromMaster","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":60,"nextStep":"CheckFileSystems","isEnd":false,"onCancel":"step:DeleteOnFailure","onFailure":"step:DeleteOnFailure","inputs":{"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ GetInstanceId.Output }}"],"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\nmount -a\nfgrep -vxf /etc/hosts /hana/shared/hosts >>/etc/hosts\nrm -f /hana/shared/hosts"}}},{"name":"CheckFileSystems","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":60,"nextStep":"InstallJq","isEnd":false,"onCancel":"step:DeleteOnFailure","onFailure":"step:DeleteOnFailure","inputs":{"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ GetInstanceId.Output }}"],"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\nDnsParams={{ GetDnsParameterList.Output }}\nif [[ ${DnsParams} == \"local\" ]]; then\n Dns=local\nelse\n Dns=$(echo ${DnsParams} | cut -d',' -f2)\nfi\n\nsap_sid=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query \"Stacks[*].Parameters[?ParameterKey=='HANASID'].ParameterValue\" --region {{global:REGION}} --output text)\nsid_upper=$(echo ${sap_sid} | tr '[[:lower:]]' '[[:upper:]]')\nDIRECTORY=\"/usr/sap/${sid_upper}\"\n\nif [ ! -d \"$DIRECTORY\" ]; then\n echo \"AMI does not have a directory ${DIRECTORY} that matched with sid ${sap_sid}...\"\n exit 32\nfi"}}},{"name":"InstallJq","action":"aws:runCommand","maxAttempts":3,"timeoutSeconds":60,"nextStep":"RunPreScripts","isEnd":false,"onCancel":"step:DeleteOnFailure","onFailure":"step:DeleteOnFailure","inputs":{"DocumentName":"AWS-RunShellScript","InstanceIds":["{{ GetInstanceId.Output }}"],"Parameters":{"commands":"#!/bin/bash\n\n# Error handling\nset -eu\ntrap 'ReturnCode=$?; echo >&2 \"$0: Error on line \"$LINENO\": $BASH_COMMAND\"; exit $ReturnCode' ERR\n\nsource /etc/os-release\nif [[ ${ID} == \"sles\" ]]; then\n ZYPP_LOCK_TIMEOUT=180 zypper install -y jq\nelse\n yum install -y jq\nfi"}}},{"description":"Run Pre Scripts","name":"RunPreScripts","action":"aws:runCommand","maxAttempts":1,"timeoutSeconds":"2700","nextStep":"CleanupOldInstallation","isCritical":false,"isEnd":false,"onCancel":"step:DeleteOnFailure","onFailure":"step:DeleteOnFailure","inputs":{"InstanceIds":["{{ GetInstanceId.Output }}"],"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n\n# Create temp working directory\nmkdir -p /root/install/add-hana-worker/{{ SetActionId.Output }}\nWORKDIR=/root/install/add-hana-worker/{{ SetActionId.Output }}\n\n# declare\nscripts='{{ GetConfigurationScripts.Output }}'\nfor row in $(echo ${scripts} | jq -r '.preConfigurationScripts.configurationScripts' | jq -r '.[] | @base64'); do\n _jq() {\n echo ${row} | base64 --decode | jq -r ${1}\n }\n s3_path=$(_jq '.s3URL')\n s3_filename=$(basename ${s3_path})\n local_file_path=${WORKDIR}/${s3_filename}\n aws s3 cp ${s3_path} ${local_file_path}\n bash ${local_file_path} > ${local_file_path}.log 2>&1\n\n if [[ $? -ne 0 ]]; then\n if [[ $(echo ${scripts} | jq -r '.preConfigurationScripts.onFailureBehaviour') != \"CONTINUE\" ]]; then\n exit 1\n fi\n fi\ndone"}}},{"description":"Adjust file systems accordingly","name":"CleanupOldInstallation","action":"aws:runCommand","maxAttempts":1,"timeoutSeconds":"2700","nextStep":"AddHanaWorkerNode","isEnd":false,"onCancel":"step:DeleteOnFailure","onFailure":"step:DeleteOnFailure","inputs":{"InstanceIds":["{{ GetInstanceId.Output }}"],"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n\n# Create temp working directory\n# mkdir -p /root/install/add-hana-worker/{{ SetActionId.Output }}\nWORKDIR=/root/install/add-hana-worker/{{ SetActionId.Output }}\nhana_sid=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query \"Stacks[*].Parameters[?ParameterKey=='HANASID'].ParameterValue\" --region {{global:REGION}} --output text | tr -d '\\n')\nis_fsx=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query \"Stacks[*].Parameters[?ParameterKey=='VolumeTypeHanaData'].ParameterValue\" --region {{global:REGION}} --output text| tr -d '\\n')\nsid_upper=$(echo ${hana_sid} | tr '[[:lower:]]' '[[:upper:]]')\nsid_lower=$(echo ${hana_sid} | tr '[[:upper:]]' '[[:lower:]]')\nusrsap=\"/usr/sap/${sid_upper}\"\nHanaWorkerHostname={{ HanaDbWorkerHostname }}\n\n# Error handling\nset -eu\ntrap 'errorout \\$?' ERR\n\nerrorout() {\n echo \"exiting with $?...\"\n}\n\nis_mounted() {\n findmnt \"$1\" > /dev/null\n}\n\nis_empty() {\n if [ -z '$(ls -A \"$1\")' ]; then\n exit 0\n else\n exit 1\n fi\n}\nsudo ps -ef | grep '/usr/sap' | grep -v grep | awk '{print \"kill -9 \"$2}' | sh || true\n\n# run only if volume type is fsx\nif [[ ${is_fsx} == \"fsx\" ]]; then\n until ! is_mounted ${usrsap}\n do\n umount ${usrsap}\n done\n fstab_entry=($(grep \" ${usrsap} \" /etc/fstab))\n dns=$(grep -i \" ${usrsap} \" /etc/fstab | cut -d ' ' -f1 | cut -d '/' -f1,2)\n sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${dns} /tmp\n mkdir /tmp/usr-sap-${HanaWorkerHostname}\n\n until ! is_mounted \"/tmp\"\n do\n umount /tmp\n done\n\n # clean up /usr/sap directory and then create directory with DB_SID\n rm -rf /usr/sap/*\n mkdir -p ${usrsap}\n chmod 777 ${usrsap}\n\n # delete the /usr/sap entry in fstab and create a new one\n sed -i \"/ \\/usr\\/sap\\/${sid_upper} /d\" /etc/fstab\n echo \"${dns}/usr-sap-${HanaWorkerHostname} ${fstab_entry[@]:1}\" >> /etc/fstab\n\n until is_mounted ${usrsap}\n do\n mount ${usrsap}\n done\n\n mount_number=`printf \"%05d\" $(echo {{ GetFsxInformation.Output }} | cut -d',' -f2)`\n hanadata=\"/hana/data/${sid_upper}/mnt${mount_number}\"\n hanalog=\"/hana/log/${sid_upper}/mnt${mount_number}\"\n mkdir -p ${hanadata} ${hanalog}\n chmod -R 777 ${hanadata} ${hanalog}\n chown -R ${sid_lower}adm:sapsys ${hanadata} ${hanalog}\n\n datadns=$(echo {{GetOntapSvmsDns.Output}} | cut -d',' -f1)\n logdns=$(echo {{GetOntapSvmsDns.Output}} | cut -d',' -f2)\n\n data_fstab_entry=\"${datadns}:/${sid_upper}_data_mnt${mount_number} ${hanadata} ${fstab_entry[@]:2}\"\n log_fstab_entry=\"${logdns}:/${sid_upper}_log_mnt${mount_number} ${hanalog} ${fstab_entry[@]:2}\"\n\n echo ${data_fstab_entry} >> /etc/fstab\n echo ${log_fstab_entry} >> /etc/fstab\n echo -n \"${data_fstab_entry}_LaunchWizard_${log_fstab_entry}\"\n\n until is_mounted ${hanadata}\n do\n mount ${hanadata}\n done\n\n until is_mounted ${hanalog}\n do\n mount ${hanalog}\n done \n chmod -R 777 ${hanadata} ${hanalog}\n chown -R ${sid_lower}adm:sapsys ${hanadata} ${hanalog}\nelse\n rm -rf /usr/sap/*\n rm -rf /hana/data/${sid_upper}/*\n rm -rf /hana/log/${sid_upper}/*\n mkdir -p ${usrsap}\n chmod 777 ${usrsap}\nfi"}}},{"description":"Adjust file systems accordingly","name":"AddHanaWorkerNode","action":"aws:runCommand","maxAttempts":1,"timeoutSeconds":"2700","nextStep":"RunPostScripts","isEnd":false,"onCancel":"step:DeleteOnFailure","onFailure":"step:DeleteOnFailure","inputs":{"InstanceIds":["{{ GetInstanceId.Output }}"],"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n# Create temp working directory\n# mkdir -p /root/install/add-hana-standby/{{ SetActionId.Output }}\nWORKDIR=/root/install/add-hana-worker/{{ SetActionId.Output }}\n\nhana_sid=$(aws cloudformation describe-stacks --stack-name {{ GetParentDeploymentName.Output }} --query \"Stacks[*].Parameters[?ParameterKey=='HANASID'].ParameterValue\" --region {{global:REGION}} --output text | tr -d '\\n')\n\n# Error handling \nset -eu \ntrap 'errorout \\$?' ERR\n\nerrorout() { \n rm -f /hana/shared/password.xml\n echo \"exiting with $?...\"\n} \n\ncd /hana/shared/${hana_sid}/global/hdb/saphostagent_setup/ \n/hana/shared/${hana_sid}/global/hdb/saphostagent_setup/saphostexec -install\n\nhana_password=$(aws secretsmanager get-secret-value --secret-id {{ HanaDbPasswordSecretKey }} --region {{global:REGION}} | jq -r '.SecretString' | cut -d \"\\\"\" -f2 | tr -d '\\n') \n\nmkfifo /hana/shared/password.xml\necho -e \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<Passwords>\\n<password><\"'!'\"[CDATA[${hana_password}]]></password>\\n<sapadm_password><\"'!'\"[CDATA[${hana_password}]]></sapadm_password>\\n<system_user_password><\"'!'\"[CDATA[${hana_password}]]></system_user_password>\\n<root_password><\"'!'\"[CDATA[${hana_password}]]></root_password>\\n</Passwords>\\n\" > /hana/shared/password.xml &\ncat /hana/shared/password.xml | /hana/shared/${hana_sid}/hdblcm/hdblcm --action=add_hosts --addhosts={{ HanaDbWorkerHostname }}:role=worker --sid=${hana_sid} --read_password_from_stdin=xml --batch \nrm -f /hana/shared/password.xml"}}},{"description":"Run Post Scripts","name":"RunPostScripts","action":"aws:runCommand","maxAttempts":1,"timeoutSeconds":"2700","isCritical":false,"isEnd":true,"onCancel":"step:DeleteOnFailure","onFailure":"step:DeleteOnFailure","inputs":{"InstanceIds":["{{ GetInstanceId.Output }}"],"DocumentName":"AWS-RunShellScript","Parameters":{"commands":"#!/bin/bash\n\n# Create temp working directory\nmkdir -p /root/install/add-hana-worker/{{ SetActionId.Output }}\nWORKDIR=/root/install/add-hana-worker/{{ SetActionId.Output }}\n\nscripts='{{ GetConfigurationScripts.Output }}'\nfor row in $(echo ${scripts} | jq -r '.postConfigurationScripts.configurationScripts' | jq -r '.[] | @base64'); do\n _jq() {\n echo ${row} | base64 --decode | jq -r ${1}\n }\n s3_path=$(_jq '.s3URL')\n s3_filename=$(basename ${s3_path})\n local_file_path=${WORKDIR}/${s3_filename}\n aws s3 cp ${s3_path} ${local_file_path}\n bash ${local_file_path} > ${local_file_path}.log 2>&1\n\n if [[ $? -ne 0 ]]; then\n if [[ $(echo ${scripts} | jq -r '.postConfigurationScripts.onFailureBehaviour') != \"CONTINUE\" ]]; then\n exit 1\n fi\n fi\ndone"}}},{"name":"DeleteOnFailure","action":"aws:branch","isEnd":true,"inputs":{"Choices":[{"NextStep":"DeleteHANAWorkerNodeStack","Variable":"{{ DisableDeploymentRollback }}","StringEquals":"False"}]}},{"description":"Delete HANA worker node CFN stack","name":"DeleteHANAWorkerNodeStack","action":"aws:deleteStack","isEnd":true,"inputs":{"StackName":"{{ CreateCfnStackName.Output }}"}}]}